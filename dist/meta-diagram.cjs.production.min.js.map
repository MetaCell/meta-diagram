{"version":3,"file":"meta-diagram.cjs.production.min.js","sources":["../src/constants.ts","../src/models/MetaOptions.ts","../src/react-diagrams/MetaNodeModel.ts","../src/components/UnknownTypeWidget.tsx","../src/react-diagrams/MetaNodeFactory.tsx","../src/react-diagrams/MetaLinkModel.ts","../src/react-diagrams/MetaLinkFactory.tsx","../src/helpers/nodesHelper.ts","../src/components/assets/styles/variables.ts","../src/components/Sidebar.tsx","../src/index.tsx","../src/models/ComponentsMap.ts","../src/models/MetaLink.ts","../src/models/MetaNode.ts","../src/models/Position.ts","../src/helpers/linksHelper.ts","../src/theme.ts"],"sourcesContent":["export enum ReactDiagramMetaTypes {\n  META_NODE = 'meta-node-type',\n  META_LINK = 'meta-link-type',\n}\n","import { IShape } from './IShape';\nimport { IId } from './IId';\n\nexport class MetaOptions implements IShape, IId {\n  options: Map<string, any>;\n\n  constructor(\n    id: string,\n    name: string,\n    shape: string,\n    variant: string,\n    options: Map<string, any>\n  ) {\n    this.options = options;\n    this.options.set('id', id);\n    this.options.set('name', name);\n    this.options.set('shape', shape);\n    this.options.set('variant', variant);\n  }\n\n  getId(): string {\n    return this.options.get('id');\n  }\n\n  getShape(): string {\n    return this.options.get('shape');\n  }\n}\n","import { DefaultPortModel, NodeModel } from '@projectstorm/react-diagrams';\nimport { ReactDiagramMetaTypes } from '../constants';\n\nexport class MetaNodeModel extends NodeModel {\n  constructor(options = {}) {\n    super({\n      ...options,\n      type: ReactDiagramMetaTypes.META_NODE,\n    });\n\n    // set up an in and out port\n\n    this.addPort(\n      new DefaultPortModel({\n        in: true,\n        name: 'in',\n      })\n    );\n    this.addPort(\n      new DefaultPortModel({\n        in: false,\n        name: 'out',\n      })\n    );\n  }\n}\n","import React from 'react';\n\nexport const UnknownTypeWidget = () => {\n  return <div>Unknown Type</div>;\n};\n","import { AbstractReactFactory } from '@projectstorm/react-canvas-core';\nimport { MetaNodeModel } from './MetaNodeModel';\nimport { UnknownTypeWidget } from '../components/UnknownTypeWidget';\nimport React from 'react';\nimport { ReactDiagramMetaTypes } from '../constants';\n\nexport class MetaNodeFactory extends AbstractReactFactory {\n  componentsMap: Map<string, React.ComponentType>;\n\n  constructor(componentsMap: Map<string, React.ComponentType>) {\n    super(ReactDiagramMetaTypes.META_NODE);\n    this.componentsMap = componentsMap;\n  }\n\n  generateModel() {\n    return new MetaNodeModel();\n  }\n\n  generateReactWidget(event: any): JSX.Element {\n    if (this.componentsMap.has(event.model.options.shape)) {\n      const ReactComponentType = this.componentsMap.get(\n        event.model.options.shape\n      );\n      return (\n        // @ts-ignore\n        <ReactComponentType\n          key={`node-factory-${event.model.getOptions().id}`}\n          engine={this.engine}\n          model={event.model}\n        />\n      );\n    }\n    // TODO: Generate default node instead\n    return <UnknownTypeWidget />;\n  }\n}\n","import { DefaultLinkModel } from '@projectstorm/react-diagrams';\nimport { ReactDiagramMetaTypes } from '../constants';\n\nexport class MetaLinkModel extends DefaultLinkModel {\n  constructor(options = {}) {\n    super({\n      ...options,\n      type: ReactDiagramMetaTypes.META_LINK,\n    });\n  }\n}\n","import { MetaLinkModel } from './MetaLinkModel';\nimport { UnknownTypeWidget } from '../components/UnknownTypeWidget';\nimport { ReactDiagramMetaTypes } from '../constants';\nimport React from 'react';\nimport { DefaultLinkFactory } from '@projectstorm/react-diagrams';\n\nexport class MetaLinkFactory extends DefaultLinkFactory {\n  componentsMap: Map<string, JSX.Element>;\n\n  constructor(componentsMap: Map<string, JSX.Element>) {\n    super(ReactDiagramMetaTypes.META_LINK);\n    this.componentsMap = componentsMap;\n  }\n\n  generateModel() {\n    return new MetaLinkModel();\n  }\n\n  generateLinkSegment(\n    model: MetaLinkModel,\n    selected: boolean,\n    path: string\n  ): JSX.Element {\n    // @ts-ignore\n    if (this.componentsMap.has(model.getOptions()?.shape)) {\n      const ReactComponentType = this.componentsMap.get(\n        // @ts-ignore\n        model.getOptions().shape\n      );\n\n      return (\n        // @ts-ignore\n        <ReactComponentType\n          key={`link-factory-${model.getOptions().id}`}\n          engine={this.engine}\n          model={model}\n          path={path}\n          selected={selected}\n        />\n      );\n    }\n    // TODO: Generate default link instead\n    return <UnknownTypeWidget />;\n  }\n}\n","import { MetaNodeModel } from '../react-diagrams/MetaNodeModel';\n\nexport function getNode(\n  id: string,\n  nodes: MetaNodeModel[]\n): MetaNodeModel | undefined {\n  return nodes.find(n => n.getOptions().id === id);\n}\n","const nodeGreen = {\n  nodeGreenBackgroundColor: '#D4F4D4',\n  nodeGreenTextColor: '#669D66',\n  nodeGreenBorderColor: 'rgba(102, 157, 102, 0.2)',\n  nodeGreenBoxShadow: '0 0.25rem 0.625rem -0.25rem rgba(102, 157, 102, 0.3)',\n};\n\nconst vars = {\n  fontFamily: 'Inter, sans-serif',\n  primaryBg: '#f1f1f1',\n  textWhite: '#FFFFFF',\n  chipTextColor: '#F2F2F7',\n  chipBgColor: 'rgba(60, 60, 67, 0.4)',\n\n  chipPrimaryTextColor: 'rgba(255, 255, 255, 0.8)',\n  chipPrimaryBgColor: 'rgba(0, 122, 255, 0.6)',\n\n  breadcrumbLinkColor: '#A2A2A2',\n  breadcrumbTextColor: '#292929',\n\n  buttonPrimaryBgColor: '4353FF',\n  buttonPrimaryBgHoverColor: '#3443E1',\n  buttonPrimaryDisabledBgColor: 'rgba(0, 122, 255, 0.4)',\n\n  listItemActiveBg: '#007AFF',\n  listSelectedTextColor: '#3C3C43',\n  listBoxShadow:\n    '0 0.1875rem 0.5rem rgba(0, 0, 0, 0.12), 0 0.1875rem 0.0625rem rgba(0, 0, 0, 0.04)',\n  listBorderColor: 'rgba(0, 0, 0, 0.04)',\n\n  dividerColor: 'rgba(118, 120, 125, 0.12)',\n\n  dropdownBg: 'rgba(246, 246, 248, 0.8)',\n  dropdownTextColor: 'rgba(60, 60, 67, 0.6)',\n\n  overlayColor: 'rgba(0, 0, 0, 0.4)',\n\n  progressBg: '#E5E5E5',\n  progressBar: '#017AFF',\n  progressShadow: 'inset 0 0 0.0625rem #E3E3E3',\n\n  switchShadow:\n    '0 0.1875rem 0.5rem rgba(0, 0, 0, 0.15), 0 0.1875rem 0.0625rem rgba(0, 0, 0, 0.06)',\n\n  sidebarBg: '#ffffff',\n  sidebarShadow: `0 0 3.75rem rgba(0, 0, 0, 0.1),\n  0 0.5rem 2.5rem -0.625rem rgba(0, 0, 0, 0.1)`,\n  canvasBg: '#fff',\n  showPropertiesButtonBg: '#161A1E',\n  nodeBorderColor: '#18A0FB',\n  nodePointerBg: '#fff',\n  nodeButtonTextColor: 'rgba(255, 255, 255, 0.8)',\n  nodeButtonLineColor: 'rgba(255, 255, 255, 0.2)',\n  nodeTextColor: '#3C3C43',\n  nodeWrapperBg: '#FFFFFF',\n  nodeLabelColor: '#76787D',\n  nodeBlockBg: 'rgba(255, 255, 255, 0.6)',\n  ...nodeGreen,\n};\n\nexport default vars;\n","import React from 'react';\nimport { Box } from '@mui/system';\nimport { makeStyles } from '@mui/styles';\nimport vars from './assets/styles/variables';\nimport { Divider, List, ListItemButton, ListItemIcon } from '@mui/material';\nimport Move from './assets/svg/move.svg';\nimport MoveActive from './assets/svg/move-active.svg';\nimport Icon from './assets/svg/icon.svg';\nimport IconActive from './assets/svg/icon-active.svg';\nimport Node from './assets/svg/node.svg';\nimport Cursor from './assets/svg/cursor.svg';\nimport CursorActive from './assets/svg/cursor-active.svg';\nimport Fullscreen from './assets/svg/fullscreen.svg';\nimport FullscreenActive from './assets/svg/fullscreen-active.svg';\n\nconst { dividerColor } = vars;\n\nconst useStyles = makeStyles(() => ({\n  node: {\n    margin: '0.25rem 0',\n    '& .MuiDivider-root': {\n      borderColor: dividerColor,\n      width: 'calc(100% - 1.5rem)',\n      margin: '0 auto',\n      border: 'none',\n      borderTop: '0.0625rem solid',\n    },\n\n    '& img': {\n      display: 'block',\n      margin: '1rem 0',\n    },\n  },\n}));\n\ntype sidebarItemProps = {\n  image: string;\n  name: string;\n  selectedImage: string;\n  selection: string;\n};\n\nconst Sidebar = () => {\n  const classes = useStyles();\n  const [selected, setSelected] = React.useState('1');\n  const svgImg = (img: string) =>\n    `data:image/svg+xml;base64,${new Buffer(img).toString('base64')}`;\n  const SidebarItem = (props: sidebarItemProps) => {\n    const { image, name, selectedImage, selection } = props;\n    return (\n      <ListItemButton\n        selected={selected === selection}\n        onClick={() => setSelected(selection)}\n      >\n        <ListItemIcon>\n          {selected === selection ? (\n            <img src={svgImg(image)} alt={name} />\n          ) : (\n            <img src={svgImg(selectedImage)} alt={name} />\n          )}\n        </ListItemIcon>\n      </ListItemButton>\n    );\n  };\n\n  return (\n    <Box className=\"sidebar\">\n      <List disablePadding component=\"nav\">\n        <SidebarItem\n          image={CursorActive}\n          selectedImage={Cursor}\n          name=\"cursor\"\n          selection=\"1\"\n        />\n        <SidebarItem\n          image={MoveActive}\n          selectedImage={Move}\n          name=\"move\"\n          selection=\"2\"\n        />\n      </List>\n\n      <Box className={classes.node}>\n        <Divider />\n        <img src={svgImg(Node)} alt=\"Node\" />\n        <Divider />\n      </Box>\n\n      <List disablePadding component=\"nav\">\n        <SidebarItem\n          image={IconActive}\n          selectedImage={Icon}\n          name=\"draw\"\n          selection=\"3\"\n        />\n        <SidebarItem\n          image={FullscreenActive}\n          selectedImage={Fullscreen}\n          name=\"fullscreen\"\n          selection=\"4\"\n        />\n      </List>\n    </Box>\n  );\n};\n\nexport default Sidebar;\n","import * as React from 'react';\nimport { MetaNode } from './models/MetaNode';\nimport { MetaLink } from './models/MetaLink';\nimport { ComponentsMap } from './models/ComponentsMap';\nimport createEngine, { DiagramModel } from '@projectstorm/react-diagrams';\nimport { MetaNodeFactory } from './react-diagrams/MetaNodeFactory';\nimport { MetaLinkFactory } from './react-diagrams/MetaLinkFactory';\nimport { CanvasWidget } from '@projectstorm/react-canvas-core';\nimport { MetaNodeModel } from './react-diagrams/MetaNodeModel';\nimport { getLinkModel } from './helpers/linksHelper';\nimport { makeStyles } from '@mui/styles';\nimport Sidebar from './components/Sidebar';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport theme from './theme';\nimport { Box } from '@mui/material';\n\nconst useStyles = makeStyles(_ => ({\n  container: {\n    height: '100%',\n    width: '100%',\n  },\n  canvasContainer: {\n    height: '100%',\n    width: '100%',\n    background: '#fffff',\n  },\n}));\n\ninterface MetaDiagramProps {\n  metaNodes: MetaNode[];\n  metaLinks: MetaLink[];\n  componentsMap: ComponentsMap;\n  wrapperClassName?: string;\n  canvasClassName?: string;\n  metaTheme: {\n    customThemeVariables: {};\n    canvasClassName: string;\n  };\n}\n\nconst MetaDiagram = ({\n  metaNodes,\n  metaLinks,\n  componentsMap,\n  wrapperClassName,\n  metaTheme,\n}: MetaDiagramProps) => {\n  const classes = useStyles();\n\n  // set up the diagram engine\n  const engine = createEngine();\n\n  engine\n    .getNodeFactories()\n    // @ts-ignore\n    .registerFactory(new MetaNodeFactory(componentsMap.nodes));\n\n  engine\n    .getLinkFactories()\n    // @ts-ignore\n    .registerFactory(new MetaLinkFactory(componentsMap.links));\n\n  // set up the diagram model\n\n  const model = new DiagramModel();\n  const nodes = metaNodes.map(\n    mn => new MetaNodeModel(Object.fromEntries(mn.options.options))\n  );\n  const links = metaLinks\n    .map(ml => getLinkModel(ml, nodes))\n    .filter(mlm => mlm !== undefined);\n  // @ts-ignore\n  model.addAll(...nodes, ...links);\n\n  // load model into engine\n  engine.setModel(model);\n\n  const containerClassName = wrapperClassName\n    ? wrapperClassName\n    : classes.container;\n\n  return (\n    <ThemeProvider theme={createTheme(theme(metaTheme?.customThemeVariables))}>\n      <CssBaseline />\n      <Box className={containerClassName}>\n        <Sidebar />\n        <CanvasWidget\n          className={`canvas-widget ${metaTheme?.canvasClassName}`}\n          engine={engine}\n        />\n      </Box>\n    </ThemeProvider>\n  );\n};\n\nexport default MetaDiagram;\nexport { MetaNode, MetaLink, MetaNodeModel, ComponentsMap };\nexport { MetaLinkModel } from './react-diagrams/MetaLinkModel';\nexport { Position } from './models/Position';\n","import React from 'react';\n\nexport class ComponentsMap {\n  nodes: Map<string, React.ComponentType>;\n  links: Map<string, React.ComponentType>;\n\n  constructor(\n    nodesMap: Map<string, React.ComponentType>,\n    linksMap: Map<string, React.ComponentType>\n  ) {\n    this.nodes = nodesMap;\n    this.links = linksMap;\n  }\n}\n","import { MetaOptions } from './MetaOptions';\nimport { ILink } from './ILink';\n\nexport class MetaLink implements ILink {\n  sourceId: string;\n  sourcePortId: string;\n  targetId: string;\n  targetPortId: string;\n  options: MetaOptions;\n\n  constructor(\n    id: string,\n    name: string,\n    shape: string,\n    sourceId: string,\n    sourcePortId: string,\n    targetId: string,\n    targetPortId: string,\n    variant: string,\n    options: Map<string, any>\n  ) {\n    if (options === undefined) {\n      options = new Map<string, any>();\n    }\n    this.sourceId = sourceId;\n    this.sourcePortId = sourcePortId;\n    this.targetId = targetId;\n    this.targetPortId = targetPortId;\n    this.options = new MetaOptions(id, name, shape, variant, options);\n  }\n\n  getSourceId(): string {\n    return this.sourceId;\n  }\n\n  getSourcePortId(): string {\n    return this.sourcePortId;\n  }\n\n  getTargetId(): string {\n    return this.targetId;\n  }\n\n  getTargetPortId(): string {\n    return this.targetPortId;\n  }\n}\n","import { MetaOptions } from './MetaOptions';\nimport { Position } from './Position';\n\nexport class MetaNode {\n  children: MetaNode[];\n  options: MetaOptions;\n\n  constructor(\n    id: string,\n    name: string,\n    shape: string,\n    position: Position,\n    variant: string,\n    options: Map<string, any>\n  ) {\n    if (options === undefined) {\n      options = new Map<string, any>();\n    }\n    this.children = [];\n    options.set('position', position);\n    this.options = new MetaOptions(id, name, shape, variant, options);\n  }\n}\n","export class Position {\n  x: number;\n  y: number;\n\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n}\n","import { MetaLink } from '../models/MetaLink';\nimport { MetaLinkModel } from '../react-diagrams/MetaLinkModel';\nimport { MetaNodeModel } from '../react-diagrams/MetaNodeModel';\nimport { getNode } from './nodesHelper';\n\nexport function getLinkModel(\n  metaLink: MetaLink,\n  nodes: MetaNodeModel[]\n): MetaLinkModel | undefined {\n  const link = new MetaLinkModel(Object.fromEntries(metaLink.options.options));\n  const source = getNode(metaLink.getSourceId(), nodes);\n  const target = getNode(metaLink.getTargetId(), nodes);\n  if (source && target) {\n    link.setSourcePort(source.getPort(metaLink.getSourcePortId()));\n    link.setTargetPort(target.getPort(metaLink.getTargetPortId()));\n    return link;\n  }\n  return undefined;\n}\n","import vars from './components/assets/styles/variables';\nimport nodeGreen from './components/assets/svg/node/green.svg';\n\ntype ThemeVars = {\n  [key: string]: any;\n};\n\nconst applicationTheme = (params: ThemeVars) => {\n  const {\n    primaryBg,\n    fontFamily,\n    chipTextColor,\n    chipBgColor,\n    textWhite,\n    listItemActiveBg,\n    listSelectedTextColor,\n    listBoxShadow,\n    listBorderColor,\n    sidebarBg,\n    sidebarShadow,\n    canvasBg,\n    showPropertiesButtonBg,\n    nodeBorderColor,\n    nodePointerBg,\n    nodeButtonTextColor,\n    nodeButtonLineColor,\n    nodeGreenBackgroundColor,\n    nodeGreenTextColor,\n    nodeGreenBorderColor,\n    nodeGreenBoxShadow,\n    nodeTextColor,\n    nodeWrapperBg,\n    nodeLabelColor,\n    nodeBlockBg,\n  } = params;\n  return {\n    components: {\n      MuiCssBaseline: {\n        styleOverrides: `\n          html {\n            background: ${primaryBg};\n            font-family: ${fontFamily};\n          }\n          body {\n            background-color:${primaryBg};\n            font-family: ${fontFamily};\n            font-size: 1rem;\n          }\n          .sidebar {\n            z-index: 5;\n            width: 4rem;\n            background: ${sidebarBg};\n            box-shadow: ${sidebarShadow};\n            border-radius: 2rem;\n            position: fixed;\n            left: 1rem;\n            top: 50%;\n            transform: translateY(-50%);\n          }\n\n          .sidebar.right {\n            left: auto;\n            right: 1rem;\n          }\n\n          .sidebar .MuiList-root {\n            padding: 0.75rem\n          }\n\n          .canvas-widget {\n            height: 100%;\n            width: 100%;\n            background-color: ${canvasBg};\n          }\n\n          .primary-node {\n            border: solid 0.0625rem ${nodeGreenBorderColor};\n            border-radius: 50%;\n            box-shadow: ${nodeGreenBoxShadow};\n            background: ${nodeGreenBackgroundColor};\n            position: relative;\n            width: 10rem;\n            height: 10rem;\n          }\n\n          .primary-node .primary-node_header {\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            height: 100%;\n            flex-direction: column;\n          }\n\n          .primary-node .icon {\n            width: 1.25rem;\n            height: 1.25rem;\n            margin: 0 auto 0.25rem;\n            background: url(data:image/svg+xml;base64,${new Buffer(\n              nodeGreen\n            ).toString('base64')});\n          }\n\n          .primary-node .primary-node_header p {\n            color: ${nodeGreenTextColor};\n          }\n\n          .primary-node p {\n            font-weight: 500;\n            color: ${nodeTextColor};\n            font-size: 0.8125rem;\n            line-height: 1.25rem;\n            letter-spacing: -0.005rem;\n            margin: 0;\n          }\n\n          .node-button.MuiButton-root {\n            background-color: ${showPropertiesButtonBg};\n            border-radius: 1.125rem;\n            font-weight: 600;\n            font-size: 0.8125rem;\n            display: flex;\n            line-height: 1rem;\n            letter-spacing: -0.025625rem;\n            color: ${nodeButtonTextColor};\n            margin: 0 !important;\n            width: 9.625rem;\n            padding: 0;\n            height: 2.25rem;\n            position: absolute;\n            top: -2.625rem;\n            font-family: ${fontFamily};\n            text-transform: none;\n            left: 50%;\n            transform: translateX(-50%);\n          }\n\n          .node-button.MuiButton-root:hover {\n            background-color: ${showPropertiesButtonBg};\n          }\n\n          .node-button .icon {\n            width: 1rem;\n            border: solid 0.0625rem;\n            height: 1rem;\n            border-radius: 50%;\n            margin: 0 1.25rem 0 0;\n            position: relative;\n          }\n\n          .node-button .icon:after {\n            content: \"\";\n            height: 1.75rem;\n            width: 0.0625rem;\n            display: block;\n            position: absolute;\n            right: -0.625rem;\n            top: 50%;\n            transform: translateY(-50%);\n            background-color: ${nodeButtonLineColor};\n          }\n\n          .primary-node .node-button .icon {\n            background: ${nodeGreenBackgroundColor};\n            border-color: ${nodeGreenBorderColor}\n          }\n\n          .nodes {\n            width: 10rem;\n            height: 10rem;\n            border: 0.09375rem solid ${nodeBorderColor};\n            z-index: 99999;\n            position: absolute;\n          }\n\n          .node .pointer {\n            width: 0.625rem;\n            height: 0.625rem;\n            background: ${nodePointerBg};\n            border: 0.09375rem solid ${nodeBorderColor};\n            border-radius: 0.125rem;\n            position: absolute;\n          }\n\n          .primary-node.rounded {\n            border-radius: 0.875rem;\n            padding: 0.5rem;\n            width: 18rem;\n            height: auto;\n          }\n\n          .primary-node.rounded .nodes {\n            left: 0;\n            top: 0;\n            width: 100%;\n            height: 100%;\n          }\n\n          .primary-node.rounded .primary-node_header {\n            height: 4.25rem;\n            margin-bottom: 0.25rem\n          }\n\n          .primary-node .block {\n            padding: 0.625rem 0.5rem;\n            background-color: ${nodeBlockBg};\n            display: flex;\n            align-items: center;\n          }\n\n          .primary-node .block:first-of-type {\n            border-top-left-radius: 0.625rem;\n            border-top-right-radius: 0.625rem;\n          }\n\n          .primary-node .block:last-child {\n            border-bottom-left-radius: 0.625rem;\n            border-bottom-right-radius: 0.625rem;\n          }\n\n          .primary-node .block:not(:last-child) {\n            margin-bottom: 0.0625rem;\n          }\n\n          .primary-node .block .disc {\n            width: 1rem;\n            height: 1rem;\n            border: solid 0.0625rem ${nodeGreenTextColor};\n            background: ${nodeGreenBackgroundColor};\n            border-radius: 50%;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            margin-right: 0.5rem\n          }\n\n          .primary-node .block .disc:after {\n            content: '';\n            background: ${nodeGreenTextColor};\n            width: 0.375rem;\n            height: 0.375rem;\n            border-radius: 50%;\n          }\n\n          .primary-node .block.reverse {\n            justify-content: end;\n          }\n\n          .primary-node .block.reverse .disc {\n            order: 2;\n            margin-left: 0.5rem;\n            margin-right: 0;\n          }\n\n          .primary-node .block.reverse p {\n            order: 1\n          }\n\n          .primary-node .block-wrapper {\n            display: flex;\n            gap: 0 0.0625rem;\n            flex-wrap: wrap;\n          }\n\n          .primary-node .block-wrapper .block {\n            flex-direction: column;\n            align-items: flex-start;\n            background: ${nodeWrapperBg};\n            padding: 0.5rem;\n            width: calc((100% - 0.125rem) / 3);\n          }\n\n          .primary-node .block-wrapper .block .function.MuiTypography-root {\n            margin-top: 0.25rem;\n            word-break: break-all;\n            font-weight: 600;\n            font-family: 'Roboto Mono', monospace;\n          }\n\n          .primary-node .block-wrapper .block .function.MuiTypography-root strong {\n            font-family: 'Roboto Mono', monospace;\n            font-weight: 600;\n          }\n\n          .primary-node .block-wrapper .block:first-of-type {\n            border-top-left-radius: 0.625rem;\n            border-top-right-radius: 0\n          }\n\n          .primary-node .block-wrapper .block:nth-of-type(3) {\n            border-top-right-radius: 0.625rem\n          }\n\n          .primary-node .block-wrapper .block:last-child {\n            width: 100%;\n            border-bottom-left-radius: 0.625rem;\n            border-bottom-right-radius: 0.625rem;\n          }\n\n          .primary-node .block-wrapper .block label {\n            display: block;\n            font-weight: 400;\n            font-size: 0.625rem;\n            line-height: 0.625rem;\n            letter-spacing: -0.005rem;\n            color: ${nodeLabelColor};\n            text-transform: uppercase;\n          }\n\n          .primary-node .seprator {\n            width: 0.125rem;\n            height: 1rem;\n            border-radius: 1.25rem;\n            margin: 0.25rem auto;\n            background: ${nodeGreenBorderColor};\n          }\n        `,\n      },\n      MuiList: {\n        styleOverrides: {\n          root: {\n            '&.customSwitch': {\n              padding: '0.125rem',\n              background: chipTextColor,\n              borderRadius: '0.5rem',\n              display: 'flex',\n              '& .MuiListItemButton-root': {\n                padding: '0.25rem 0.75rem',\n                borderRadius: '0.4375rem',\n                width: '10.59375rem',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                '&:not(:last-child)': {\n                  marginBottom: '0',\n                },\n                '&.Mui-disabled': {\n                  opacity: 1,\n                },\n                '&.Mui-selected': {\n                  background: textWhite,\n                  boxShadow: listBoxShadow,\n                  border: `0.03125rem solid ${listBorderColor}`,\n                  '& .MuiTypography-root': {\n                    color: listSelectedTextColor,\n                  },\n                },\n              },\n              '& .MuiChip-root': {\n                marginLeft: '0.25rem',\n              },\n              '& .MuiTypography-root': {\n                fontWeight: 500,\n                fontSize: '0.8125rem',\n                lineHeight: '1.25rem',\n                letterSpacing: '-0.005rem',\n                color: chipBgColor,\n                margin: 0,\n              },\n            },\n          },\n        },\n      },\n      MuiListItemIcon: {\n        styleOverrides: {\n          root: {\n            minWidth: 'inherit',\n          },\n        },\n      },\n      MuiListItemButton: {\n        styleOverrides: {\n          root: {\n            padding: 0,\n            width: '2.5rem',\n            height: '2.5rem',\n            borderRadius: '50%',\n            justifyContent: 'center',\n            backgroundColor: chipTextColor,\n            '&:hover': {\n              backgroundColor: chipTextColor,\n            },\n            '&:not(:last-child)': {\n              marginBottom: '0.75rem',\n            },\n            '&.Mui-selected': {\n              backgroundColor: listItemActiveBg,\n              '&:hover': {\n                backgroundColor: listItemActiveBg,\n              },\n            },\n            '&.Mui-disabled': {\n              opacity: 0.8,\n            },\n          },\n        },\n      },\n    },\n  };\n};\n\nexport default (customVariables: ThemeVars) =>\n  applicationTheme({\n    ...vars,\n    ...customVariables,\n  });\n"],"names":["ReactDiagramMetaTypes","MetaOptions","constructor","id","name","shape","variant","options","this","set","getId","get","getShape","MetaNodeModel","NodeModel","super","type","META_NODE","addPort","DefaultPortModel","in","UnknownTypeWidget","React","MetaNodeFactory","AbstractReactFactory","componentsMap","generateModel","generateReactWidget","event","has","model","ReactComponentType","key","getOptions","engine","MetaLinkModel","DefaultLinkModel","META_LINK","MetaLinkFactory","DefaultLinkFactory","generateLinkSegment","selected","path","_model$getOptions","getNode","nodes","find","n","vars","fontFamily","primaryBg","textWhite","chipTextColor","chipBgColor","chipPrimaryTextColor","chipPrimaryBgColor","breadcrumbLinkColor","breadcrumbTextColor","buttonPrimaryBgColor","buttonPrimaryBgHoverColor","buttonPrimaryDisabledBgColor","listItemActiveBg","listSelectedTextColor","listBoxShadow","listBorderColor","dividerColor","dropdownBg","dropdownTextColor","overlayColor","progressBg","progressBar","progressShadow","switchShadow","sidebarBg","sidebarShadow","canvasBg","showPropertiesButtonBg","nodeBorderColor","nodePointerBg","nodeButtonTextColor","nodeButtonLineColor","nodeTextColor","nodeWrapperBg","nodeLabelColor","nodeBlockBg","nodeGreenBackgroundColor","nodeGreenTextColor","nodeGreenBorderColor","nodeGreenBoxShadow","useStyles","makeStyles","node","margin","& .MuiDivider-root","borderColor","width","border","borderTop","& img","display","Sidebar","classes","setSelected","useState","svgImg","img","Buffer","toString","SidebarItem","props","image","selectedImage","selection","ListItemButton","onClick","ListItemIcon","src","alt","Box","className","List","disablePadding","component","Divider","_","container","height","canvasContainer","background","nodesMap","linksMap","links","sourceId","sourcePortId","targetId","targetPortId","undefined","Map","getSourceId","getSourcePortId","getTargetId","getTargetPortId","position","children","x","y","metaNodes","metaLinks","wrapperClassName","metaTheme","createEngine","getNodeFactories","registerFactory","getLinkFactories","DiagramModel","map","mn","Object","fromEntries","ml","metaLink","link","source","target","setSourcePort","getPort","setTargetPort","getLinkModel","filter","mlm","addAll","setModel","containerClassName","ThemeProvider","theme","createTheme","customVariables","customThemeVariables","params","components","MuiCssBaseline","styleOverrides","MuiList","root","&.customSwitch","padding","borderRadius","& .MuiListItemButton-root","alignItems","justifyContent","&:not(:last-child)","marginBottom","&.Mui-disabled","opacity","&.Mui-selected","boxShadow","& .MuiTypography-root","color","& .MuiChip-root","marginLeft","fontWeight","fontSize","lineHeight","letterSpacing","MuiListItemIcon","minWidth","MuiListItemButton","backgroundColor","&:hover","applicationTheme","CssBaseline","CanvasWidget","canvasClassName"],"mappings":"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"}