{"version":3,"file":"meta-diagram.cjs.production.min.js","sources":["../src/constants.ts","../src/models/Position.ts","../src/react-diagrams/MetaNodeModel.ts","../src/react-diagrams/MetaLinkModel.ts","../src/components/UnknownTypeWidget.tsx","../src/react-diagrams/MetaNodeFactory.tsx","../src/react-diagrams/MetaLinkFactory.tsx","../src/components/assets/styles/variables.ts","../src/components/Sidebar.tsx","../src/models/Exceptions.ts","../src/models/BoundingBox.ts","../src/models/MetaGraph.ts","../src/index.tsx","../src/models/ComponentsMap.ts","../src/models/MetaLink.ts","../src/models/MetaNode.ts","../src/helpers/nodesHelper.ts","../src/helpers/linksHelper.ts","../src/theme.ts"],"sourcesContent":["export enum ReactDiagramMetaTypes {\n  META_NODE = 'meta-node-type',\n  META_LINK = 'meta-link-type',\n}\n","export class Position {\n\n  private _x: number;\n  private _y: number;\n\n  constructor(x: number, y: number) {\n    this._x = x;\n    this._y = y;\n  }\n\n  // @ts-ignore\n  get x(): number {\n    return this._x;\n  }\n\n  // @ts-ignore\n  set x(value: number) {\n    this._x = value;\n  }\n\n  // @ts-ignore\n  get y(): number {\n    return this._y;\n  }\n\n  // @ts-ignore\n  set y(value: number) {\n    this._y = value;\n  }\n\n  add(otherPosition: Position) : Position {\n    return new Position(this._x+ otherPosition._x, this._y + otherPosition._y)\n  }\n\n  sub(otherPosition: Position) : Position {\n    return new Position(this._x - otherPosition._x, this._y - otherPosition._y)\n  }\n\n}\n","import {DefaultPortModel, NodeModel} from '@projectstorm/react-diagrams';\nimport {ReactDiagramMetaTypes} from '../constants';\nimport {Position} from \"../models/Position\";\n\nexport class MetaNodeModel extends NodeModel {\n    constructor(options = {}) {\n        super({\n            ...options,\n            type: ReactDiagramMetaTypes.META_NODE,\n        });\n\n        // set up an in and out port\n\n        this.addPort(\n            new DefaultPortModel({\n                in: true,\n                name: 'in',\n            })\n        );\n        this.addPort(\n            new DefaultPortModel({\n                in: false,\n                name: 'out',\n            })\n        );\n    }\n\n\n    getGraphPath(): string[]{\n        // @ts-ignore\n        return [...this.getOptions()['graphPath']]\n    }\n\n    getLocalPosition(): Position{\n\n        // @ts-ignore\n        return this.getOptions()['localPosition']\n    }\n\n    private calculateLocalPosition(parent: MetaNodeModel | undefined): Position {\n        const worldPosition = new Position(this.getX(), this.getY())\n        const parentWorldPosition = parent ? new Position(parent.getX(), parent.getY()): new Position(0,0)\n        return worldPosition.sub(parentWorldPosition)\n    }\n\n    updateLocalPosition(parent: MetaNodeModel | undefined): void {\n        // @ts-ignore\n        this.options['localPosition'] =  this.calculateLocalPosition(parent)\n    }\n\n    setContainerBoundingBox(containerBoundingBox: {left: number, top: number, right: number, bottom: number}): void {\n        // @ts-ignore\n        this.options['containerBoundingBox'] =  containerBoundingBox\n    }\n\n}\n","import { DefaultLinkModel } from '@projectstorm/react-diagrams';\nimport { ReactDiagramMetaTypes } from '../constants';\n\nexport class MetaLinkModel extends DefaultLinkModel {\n  constructor(options = {}) {\n    super({\n      ...options,\n      type: ReactDiagramMetaTypes.META_LINK,\n    });\n  }\n}\n","import React from 'react';\n\nexport const UnknownTypeWidget = () => {\n  return <div>Unknown Type</div>;\n};\n","import { AbstractReactFactory } from '@projectstorm/react-canvas-core';\nimport { MetaNodeModel } from './MetaNodeModel';\nimport { UnknownTypeWidget } from '../components/UnknownTypeWidget';\nimport React from 'react';\nimport { ReactDiagramMetaTypes } from '../constants';\n\nexport class MetaNodeFactory extends AbstractReactFactory {\n  componentsMap: Map<string, React.ComponentType>;\n\n  constructor(componentsMap: Map<string, React.ComponentType>) {\n    super(ReactDiagramMetaTypes.META_NODE);\n    this.componentsMap = componentsMap;\n  }\n\n  generateModel() {\n    return new MetaNodeModel();\n  }\n\n  generateReactWidget(event: any): JSX.Element {\n    if (this.componentsMap.has(event.model.options.shape)) {\n      const ReactComponentType = this.componentsMap.get(\n        event.model.options.shape\n      );\n      return (\n        // @ts-ignore\n        <ReactComponentType\n          key={`node-factory-${event.model.getOptions().id}`}\n          engine={this.engine}\n          model={event.model}\n        />\n      );\n    }\n    // TODO: Generate default node instead\n    return <UnknownTypeWidget />;\n  }\n}\n","import { MetaLinkModel } from './MetaLinkModel';\nimport { UnknownTypeWidget } from '../components/UnknownTypeWidget';\nimport { ReactDiagramMetaTypes } from '../constants';\nimport React from 'react';\nimport { DefaultLinkFactory } from '@projectstorm/react-diagrams';\n\nexport class MetaLinkFactory extends DefaultLinkFactory {\n  componentsMap: Map<string, JSX.Element>;\n\n  constructor(componentsMap: Map<string, JSX.Element>) {\n    super(ReactDiagramMetaTypes.META_LINK);\n    this.componentsMap = componentsMap;\n  }\n\n  generateModel() {\n    return new MetaLinkModel();\n  }\n\n  generateLinkSegment(\n    model: MetaLinkModel,\n    selected: boolean,\n    path: string\n  ): JSX.Element {\n    // @ts-ignore\n    if (this.componentsMap.has(model.getOptions()?.shape)) {\n      const ReactComponentType = this.componentsMap.get(\n        // @ts-ignore\n        model.getOptions().shape\n      );\n\n      return (\n        // @ts-ignore\n        <ReactComponentType\n          key={`link-factory-${model.getOptions().id}`}\n          engine={this.engine}\n          model={model}\n          path={path}\n          selected={selected}\n        />\n      );\n    }\n    // TODO: Generate default link instead\n    return <UnknownTypeWidget />;\n  }\n}\n","const vars = {\n  fontFamily: 'Inter, sans-serif',\n  primaryBg: '#f1f1f1',\n  textWhite: '#FFFFFF',\n  chipTextColor: '#F2F2F7',\n  chipBgColor: 'rgba(60, 60, 67, 0.4)',\n\n  chipPrimaryTextColor: 'rgba(255, 255, 255, 0.8)',\n  chipPrimaryBgColor: 'rgba(0, 122, 255, 0.6)',\n\n  breadcrumbLinkColor: '#A2A2A2',\n  breadcrumbTextColor: '#292929',\n\n  buttonPrimaryBgColor: '4353FF',\n  buttonPrimaryBgHoverColor: '#3443E1',\n  buttonPrimaryDisabledBgColor: 'rgba(0, 122, 255, 0.4)',\n\n  listItemActiveBg: '#007AFF',\n  listSelectedTextColor: '#3C3C43',\n  listBoxShadow:\n    '0 0.1875rem 0.5rem rgba(0, 0, 0, 0.12), 0 0.1875rem 0.0625rem rgba(0, 0, 0, 0.04)',\n  listBorderColor: 'rgba(0, 0, 0, 0.04)',\n\n  dividerColor: 'rgba(118, 120, 125, 0.12)',\n\n  dropdownBg: 'rgba(246, 246, 248, 0.8)',\n  dropdownTextColor: 'rgba(60, 60, 67, 0.6)',\n\n  overlayColor: 'rgba(0, 0, 0, 0.4)',\n\n  progressBg: '#E5E5E5',\n  progressBar: '#017AFF',\n  progressShadow: 'inset 0 0 0.0625rem #E3E3E3',\n\n  switchShadow:\n    '0 0.1875rem 0.5rem rgba(0, 0, 0, 0.15), 0 0.1875rem 0.0625rem rgba(0, 0, 0, 0.06)',\n};\n\nexport default vars;\n","import React from 'react';\nimport { Box } from '@mui/system';\nimport { makeStyles } from '@mui/styles';\nimport vars from './assets/styles/variables';\nimport { Divider, List, ListItemButton, ListItemIcon } from '@mui/material';\nimport Move from './assets/svg/move.svg';\nimport Icon from './assets/svg/icon.svg';\nimport Node from './assets/svg/node.svg';\nimport Cursor from './assets/svg/cursor.svg';\nimport Fullscreen from './assets/svg/fullscreen.svg';\n\nconst { textWhite, dividerColor } = vars;\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    zIndex: '5',\n    width: '4rem',\n    background: textWhite,\n    boxShadow:\n      '0 0 3.75rem rgba(0, 0, 0, 0.1), 0 0.5rem 2.5rem -0.625rem rgba(0, 0, 0, 0.1)',\n    borderRadius: '2rem',\n    position: 'fixed',\n    left: '1rem',\n    top: '50%',\n    transform: 'translateY(-50%)',\n\n    '&.right': {\n      left: 'auto',\n      right: '1rem',\n    },\n\n    '& .MuiList-root': {\n      padding: '0.75rem',\n    },\n  },\n\n  node: {\n    margin: '0.25rem 0',\n    '& .MuiDivider-root': {\n      borderColor: dividerColor,\n      width: 'calc(100% - 1.5rem)',\n      margin: '0 auto',\n      border: 'none',\n      borderTop: '0.0625rem solid',\n    },\n\n    '& img': {\n      display: 'block',\n      margin: '1rem 0',\n    },\n  },\n}));\n\nconst Sidebar = () => {\n  const classes = useStyles();\n  return (\n    <Box className={`${classes.root} left`}>\n      <List disablePadding component=\"nav\">\n        <ListItemButton selected>\n          <ListItemIcon>\n            <img\n              src={`data:image/svg+xml;base64,${new Buffer(Cursor).toString(\n                'base64'\n              )}`}\n              alt=\"icon\"\n            />\n          </ListItemIcon>\n        </ListItemButton>\n\n        <ListItemButton>\n          <ListItemIcon>\n            <img\n              src={`data:image/svg+xml;base64,${new Buffer(Move).toString(\n                'base64'\n              )}`}\n              alt=\"move\"\n            />\n          </ListItemIcon>\n        </ListItemButton>\n      </List>\n\n      <Box className={classes.node}>\n        <Divider />\n        <img\n          src={`data:image/svg+xml;base64,${new Buffer(Node).toString(\n            'base64'\n          )}`}\n          alt=\"node\"\n        />\n        <Divider />\n      </Box>\n\n      <List disablePadding component=\"nav\">\n        <ListItemButton disabled>\n          <ListItemIcon>\n            <img\n              src={`data:image/svg+xml;base64,${new Buffer(Icon).toString(\n                'base64'\n              )}`}\n              alt=\"icon\"\n            />\n          </ListItemIcon>\n        </ListItemButton>\n\n        <ListItemButton>\n          <ListItemIcon>\n            <img\n              src={`data:image/svg+xml;base64,${new Buffer(Fullscreen).toString(\n                'base64'\n              )}`}\n              alt=\"fullscreen\"\n            />\n          </ListItemIcon>\n        </ListItemButton>\n      </List>\n    </Box>\n  );\n};\n\nexport default Sidebar;\n","export class UnknownParent extends Error {\n    constructor(id: string | undefined) {\n        const msg = `Root with id ${id} not found`\n        super(msg);\n        Object.setPrototypeOf(this, UnknownParent.prototype);\n    }\n}","export class BoundingBox {\n    private _left: number\n    private _top: number\n    private _right: number\n    private _bottom: number\n\n    constructor(left: number, top: number, right: number, bottom: number) {\n        this._left = left;\n        this._top = top;\n        this._right = right;\n        this._bottom = bottom;\n    }\n\n\n    // @ts-ignore\n    get left(): number {\n        return this._left;\n    }\n    // @ts-ignore\n    set left(value: number) {\n        this._left = value;\n    }\n    // @ts-ignore\n    get top(): number {\n        return this._top;\n    }\n\n    // @ts-ignore\n    set top(value: number) {\n        this._top = value;\n    }\n\n    // @ts-ignore\n    get right(): number {\n        return this._right;\n    }\n\n    // @ts-ignore\n    set right(value: number) {\n        this._right = value;\n    }\n\n    // @ts-ignore\n    get bottom(): number {\n        return this._bottom;\n    }\n\n    // @ts-ignore\n    set bottom(value: number) {\n        this._bottom = value;\n    }\n\n    getWidth() : number {\n        return this._right - this._left\n    }\n\n    getHeight() : number {\n        return this._top - this._bottom\n    }\n}","import {MetaNodeModel} from \"../react-diagrams/MetaNodeModel\";\nimport { UnknownParent } from \"./Exceptions\";\nimport {BoundingBox} from \"./BoundingBox\";\n\nclass Graph {\n    private readonly root: MetaNodeModel;\n    private readonly children: Map<string, Graph>;\n\n    constructor(metaNodeModel: MetaNodeModel) {\n        this.root = metaNodeModel;\n        this.children = new Map<string, Graph>()\n    }\n\n    getID() : string{\n        return this.root.getID()\n    }\n\n    getRoot() : MetaNodeModel{\n        return this.root\n    }\n\n    getChild(id:string) {\n        return this.children.get(id)\n    }\n\n    addChild(graph: Graph) : void {\n        this.children.set(graph.getID(), graph)\n    }\n\n    getChildren(): MetaNodeModel[] {\n        return Array.from(this.children.values()).map(g => g.getRoot())\n    }\n\n    getDescendancy(): MetaNodeModel[] {\n        const descendancy = this.getChildren()\n        for(const graph of Array.from(this.children.values())){\n            descendancy.push(...graph.getDescendancy())\n        }\n        return descendancy\n    }\n\n    dfs(id: string): MetaNodeModel | boolean {\n        if(this.getID() == id){\n            return this.root\n        }\n        for (let root of Array.from(this.children.values())) {\n            const found = root.dfs(id)\n            if(found){\n                return found\n            }\n        }\n        return false\n    }\n\n    getContainerBoundingBox() : BoundingBox {\n        let width = this.getRoot().width\n        let height = this.getRoot().height\n        let x = this.getRoot().getX()\n        let y = this.getRoot().getY()\n        let left = x - width / 2\n        let right = x + width / 2\n        let top = y + height / 2\n        let bottom = y - height / 2\n        for (let child of Array.from(this.children.values())) {\n            const childBox = child.getContainerBoundingBox()\n            if(childBox.left < left){\n                left = childBox.left\n            }if(childBox.right > right){\n                right = childBox.right\n            }if(childBox.top > top){\n                top = childBox.top\n            }if(childBox.bottom < bottom){\n                bottom = childBox.bottom\n            }\n        }\n        return new BoundingBox(left, top, right, bottom)\n    }\n\n}\n\n\nexport class MetaGraph {\n    private readonly roots: Map<string, Graph>;\n\n    constructor() {\n        this.roots = new Map<string, Graph>()\n    }\n\n    addNode(metaNodeModel:MetaNodeModel): void {\n        const path = metaNodeModel.getGraphPath()\n        if(path.length == 1){\n            this.roots.set(metaNodeModel.getID(), new Graph(metaNodeModel))\n        }else{\n            path.pop() // Removes own id from path\n            const parentGraph = this.findNodeGraph(path)\n            parentGraph.addChild(new Graph(metaNodeModel))\n        }\n    }\n\n\n    getNodes() : MetaNodeModel[] {\n        const nodes = []\n        for(const graph of Array.from(this.roots.values())){\n            nodes.push(graph.getRoot())\n            nodes.push(...graph.getDescendancy())\n        }\n        return nodes\n    }\n\n    getChildren(parent : MetaNodeModel): MetaNodeModel[] {\n        const path = parent.getGraphPath()\n        if (path.length == 1) {\n            const root = this.roots.get(parent.getID())\n            if (root == undefined) {\n                throw new UnknownParent(parent.getID())\n            } else {\n                return root.getChildren()\n            }\n        } else {\n            const graph = this.findNodeGraph(path)\n            return graph.getChildren()\n        }\n    }\n\n    getParent(node : MetaNodeModel): MetaNodeModel | undefined {\n        const path = node.getGraphPath()\n        if (path.length == 1) {\n           return undefined\n        } else {\n            path.pop() // removes own id from path\n            const parentGraph = this.findNodeGraph(path)\n            return parentGraph.getRoot()\n        }\n    }\n\n    getNodeDFS(nodeId: string): MetaNodeModel | undefined {\n        for (let root of Array.from(this.roots.values())) {\n            const found = root.dfs(nodeId)\n            if(found){\n                // @ts-ignore\n                return found\n            }\n        }\n        return undefined\n    }\n\n    getNodeContainerBoundingBox(node: MetaNodeModel) : BoundingBox {\n        const graph = this.findNodeGraph(node.getGraphPath())\n        return graph.getContainerBoundingBox()\n    }\n\n    private findNodeGraph(path: string[]) : Graph {\n        const rootId = path.shift()\n        // @ts-ignore\n        const root = this.roots.get(rootId)\n        if (root == undefined){\n            throw new UnknownParent(rootId)\n        }\n        let parent = root\n        while(path.length > 0){\n            const next = path.shift()\n            // @ts-ignore\n            parent = parent.getChild(next)\n            if (parent == undefined){\n                throw new UnknownParent(next)\n            }\n        }\n        return parent\n    }\n\n    handleNodePositionChanged(metaNodeModel: MetaNodeModel){\n        this.updateChildrenPosition(metaNodeModel)\n        this.updateNodeLocalPosition(metaNodeModel)\n    }\n\n    private updateChildrenPosition(metaNodeModel: MetaNodeModel){\n        const children = this.getChildren(metaNodeModel);\n\n        children.forEach(n => {\n            /*\n                No need to explicitly call updateChildrenPosition for n children because it will happen automatically in\n                the event listener\n             */\n            // @ts-ignore\n            const localPosition = n.getLocalPosition()\n            n.setPosition(metaNodeModel.getX() + localPosition.x, metaNodeModel.getY() + localPosition.y)\n\n        })\n    }\n\n    private updateNodeLocalPosition(metaNodeModel: MetaNodeModel){\n        const parent = this.getParent(metaNodeModel)\n        metaNodeModel.updateLocalPosition(parent)\n    }\n\n    updateNodesContainerBoundingBoxes(nodes: MetaNodeModel[]): void {\n        nodes.forEach(n => n.setContainerBoundingBox(this.getNodeContainerBoundingBox(n)))\n    }\n}\n\n","import * as React from 'react';\nimport { MetaNode } from './models/MetaNode';\nimport { MetaLink } from './models/MetaLink';\nimport { ComponentsMap } from './models/ComponentsMap';\nimport createEngine, { DiagramModel } from '@projectstorm/react-diagrams';\nimport { MetaNodeFactory } from './react-diagrams/MetaNodeFactory';\nimport { MetaLinkFactory } from './react-diagrams/MetaLinkFactory';\nimport { CanvasWidget } from '@projectstorm/react-canvas-core';\nimport { MetaNodeModel } from './react-diagrams/MetaNodeModel';\nimport { getLinkModel } from './helpers/linksHelper';\nimport { makeStyles } from '@mui/styles';\nimport Sidebar from './components/Sidebar';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport theme from './theme';\nimport { Box } from '@mui/material';\nimport {generateMetaGraph, registerPositionListener} from \"./helpers/nodesHelper\";\nimport {useEffect} from \"react\";\n\nconst useStyles = makeStyles(_ => ({\n  container: {\n    height: '100%',\n    width: '100%',\n  },\n  canvasContainer: {\n    height: '100%',\n    width: '100%',\n    background: '#fffff',\n  },\n}));\n\ninterface MetaDiagramProps {\n  metaNodes: MetaNode[];\n  metaLinks: MetaLink[];\n  componentsMap: ComponentsMap;\n  wrapperClassName?: string;\n  canvasClassName?: string;\n  metaTheme: {\n    customThemeVariables: {};\n    canvasClassName: string;\n  };\n}\n\nconst MetaDiagram = ({\n  metaNodes,\n  metaLinks,\n  componentsMap,\n  wrapperClassName,\n  metaTheme,\n}: MetaDiagramProps) => {\n  const classes = useStyles();\n\n  // set up the diagram engine\n  const engine = createEngine();\n\n  engine\n    .getNodeFactories()\n    // @ts-ignore\n    .registerFactory(new MetaNodeFactory(componentsMap.nodes));\n\n  engine\n    .getLinkFactories()\n    // @ts-ignore\n    .registerFactory(new MetaLinkFactory(componentsMap.links));\n\n  const metaGraph = generateMetaGraph(metaNodes)\n\n  const repaintCanvas = (event: any) => {\n    const node = event.entity\n    metaGraph.handleNodePositionChanged(node)\n    engine.repaintCanvas();\n  }\n\n\n  // set up the diagram model\n\n  const model = new DiagramModel();\n\n  const nodes = metaGraph.getNodes()\n  registerPositionListener(nodes, repaintCanvas)\n\n  const links = metaLinks\n    .map(ml => getLinkModel(ml, metaGraph))\n    .filter(mlm => mlm !== undefined);\n  // @ts-ignore\n  model.addAll(...nodes, ...links);\n\n  // load model into engine\n  engine.setModel(model);\n\n  useEffect(() => {\n    // @ts-ignore\n    metaGraph.updateNodesContainerBoundingBoxes(model.getNodes(), metaGraph)\n    // @ts-ignore\n    model.registerListener({nodesUpdated: (event => metaGraph.updateNodesContainerBoundingBoxes([event.node], metaGraph))})\n  }, [])\n\n\n  const containerClassName = wrapperClassName\n    ? wrapperClassName\n    : classes.container;\n\n  return (\n    <ThemeProvider theme={createTheme(theme(metaTheme?.customThemeVariables))}>\n      <CssBaseline />\n      <Box className={containerClassName}>\n        <Sidebar />\n        <CanvasWidget\n          className={`${classes.canvasContainer} ${metaTheme?.canvasClassName}`}\n          engine={engine}\n        />\n      </Box>\n    </ThemeProvider>\n  );\n};\n\nexport default MetaDiagram;\nexport { MetaNode, MetaLink, MetaNodeModel, ComponentsMap };\nexport { MetaLinkModel } from './react-diagrams/MetaLinkModel';\nexport { Position } from './models/Position';\n","import React from 'react';\n\nexport class ComponentsMap {\n  nodes: Map<string, React.ComponentType>;\n  links: Map<string, React.ComponentType>;\n\n  constructor(\n    nodesMap: Map<string, React.ComponentType>,\n    linksMap: Map<string, React.ComponentType>\n  ) {\n    this.nodes = nodesMap;\n    this.links = linksMap;\n  }\n}\n","import { ILink } from './ILink';\nimport {MetaLinkModel} from \"../react-diagrams/MetaLinkModel\";\n\nexport class MetaLink implements ILink {\n  sourceId: string;\n  sourcePortId: string;\n  targetId: string;\n  targetPortId: string;\n  options: Map<string, any>;\n\n  constructor(\n    id: string,\n    name: string,\n    shape: string,\n    sourceId: string,\n    sourcePortId: string,\n    targetId: string,\n    targetPortId: string,\n    options: Map<string, any>\n  ) {\n    this.sourceId = sourceId;\n    this.sourcePortId = sourcePortId;\n    this.targetId = targetId;\n    this.targetPortId = targetPortId;\n    this.options = options;\n    this.options.set('id', id);\n    this.options.set('name', name);\n    this.options.set('shape', shape);\n  }\n\n  getSourceId(): string {\n    return this.sourceId;\n  }\n\n  getSourcePortId(): string {\n    return this.sourcePortId;\n  }\n\n  getTargetId(): string {\n    return this.targetId;\n  }\n\n  getTargetPortId(): string {\n    return this.targetPortId;\n  }\n\n  toModel(): MetaLinkModel {\n    return new MetaLinkModel(Object.fromEntries(this.options))\n  }\n}\n","import { Position } from './Position';\nimport {MetaNodeModel} from \"../react-diagrams/MetaNodeModel\";\n\nexport class MetaNode {\n  private readonly parent: MetaNode | undefined;\n  private readonly position: Position;\n  private readonly options: Map<string, any>;\n\n  constructor(\n    id: string,\n    name: string,\n    shape: string,\n    position: Position,\n    parent: MetaNode | undefined,\n    options: Map<string, any>\n  ) {\n    this.parent = parent\n    this.position = position\n    this.options = new Map(options)\n    this.options.set('id', id);\n    this.options.set('name', name);\n    this.options.set('shape', shape);\n  }\n\n  private getId() : string{\n    return this.options.get('id')\n  }\n\n  private getGraphPath() : string[] {\n    if(this.parent){\n      const graphPath = this.parent.getGraphPath()\n      graphPath.push(<string>this.getId())\n      return graphPath\n    }\n    return [this.getId()]\n  }\n\n  private getWorldPosition() : Position {\n    return this.parent ? this.position.add(this.parent?.getWorldPosition()) : this.position\n  }\n\n  getDepth() : number {\n    return this.parent ? this.parent.getDepth()+1 : 0\n  }\n\n  toModel() : MetaNodeModel {\n    const optionsMap = new Map(this.options)\n    optionsMap.set('graphPath', this.getGraphPath())\n    optionsMap.set('localPosition', this.position)\n    optionsMap.set('depth', this.getDepth())\n    const metaNodeModel =  new MetaNodeModel(Object.fromEntries(optionsMap))\n    const worldPosition = this.getWorldPosition()\n    metaNodeModel.setPosition(worldPosition.x, worldPosition.y)\n    return metaNodeModel\n  }\n\n}\n","import {MetaNode} from \"../models/MetaNode\";\nimport {BaseEntityEvent} from \"@projectstorm/react-canvas-core\";\nimport {NodeModel, NodeModelGenerics} from \"@projectstorm/react-diagrams\";\nimport {MetaGraph} from \"../models/MetaGraph\";\nimport {MetaNodeModel} from \"../react-diagrams/MetaNodeModel\";\n\n\nexport function generateMetaGraph(metaNodes: MetaNode[]) : MetaGraph {\n  const metaGraph = new MetaGraph()\n  metaNodes.sort(function(a, b) {\n    return a.getDepth() - b.getDepth();\n  });\n\n  for(const mn of metaNodes){\n\n    const metaNodeModel = mn.toModel()\n\n    metaGraph.addNode(metaNodeModel)\n  }\n  return metaGraph\n}\n\nexport function registerPositionListener(metaNodeModels: MetaNodeModel[], callback: { (event: any): void; (arg0: BaseEntityEvent<NodeModel<NodeModelGenerics>>): void; }){\n  // @ts-ignore\n  metaNodeModels.forEach(metaNodeModel => metaNodeModel.registerListener({positionChanged: (event => callback(event))}))\n}\n\n","import { MetaLink } from '../models/MetaLink';\nimport { MetaLinkModel } from '../react-diagrams/MetaLinkModel';\nimport {MetaGraph} from \"../models/MetaGraph\";\n\nexport function getLinkModel(\n  metaLink: MetaLink,\n  metaGraph: MetaGraph\n): MetaLinkModel | undefined {\n  const link = metaLink.toModel();\n  const source = metaGraph.getNodeDFS(metaLink.getSourceId());\n  const target = metaGraph.getNodeDFS(metaLink.getTargetId());\n  if (source && target) {\n    link.setSourcePort(source.getPort(metaLink.getSourcePortId()));\n    link.setTargetPort(target.getPort(metaLink.getTargetPortId()));\n    return link;\n  }\n  return undefined;\n}\n","import vars from './components/assets/styles/variables';\n\ntype ThemeVars = {\n  [key: string]: any;\n};\n\nconst applicationTheme = (params: ThemeVars) => {\n  const {\n    primaryBg,\n    fontFamily,\n    chipTextColor,\n    chipBgColor,\n    textWhite,\n    listItemActiveBg,\n    listSelectedTextColor,\n    listBoxShadow,\n    listBorderColor,\n  } = params;\n  return {\n    components: {\n      MuiCssBaseline: {\n        styleOverrides: `\n          html {\n            background: ${primaryBg};\n            font-family: ${fontFamily};\n          }\n          body {\n            background-color:${primaryBg};\n            font-family: ${fontFamily};\n            font-size: 1rem;\n          }\n        `,\n      },\n      MuiList: {\n        styleOverrides: {\n          root: {\n            '&.customSwitch': {\n              padding: '0.125rem',\n              background: chipTextColor,\n              borderRadius: '0.5rem',\n              display: 'flex',\n              '& .MuiListItemButton-root': {\n                padding: '0.25rem 0.75rem',\n                borderRadius: '0.4375rem',\n                width: '10.59375rem',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                '&:not(:last-child)': {\n                  marginBottom: '0',\n                },\n                '&.Mui-disabled': {\n                  opacity: 1,\n                },\n                '&.Mui-selected': {\n                  background: textWhite,\n                  boxShadow: listBoxShadow,\n                  border: `0.03125rem solid ${listBorderColor}`,\n                  '& .MuiTypography-root': {\n                    color: listSelectedTextColor,\n                  },\n                },\n              },\n              '& .MuiChip-root': {\n                marginLeft: '0.25rem',\n              },\n              '& .MuiTypography-root': {\n                fontWeight: 500,\n                fontSize: '0.8125rem',\n                lineHeight: '1.25rem',\n                letterSpacing: '-0.005rem',\n                color: chipBgColor,\n                margin: 0,\n              },\n            },\n          },\n        },\n      },\n      MuiListItemIcon: {\n        styleOverrides: {\n          root: {\n            minWidth: 'inherit',\n          },\n        },\n      },\n      MuiListItemButton: {\n        styleOverrides: {\n          root: {\n            padding: 0,\n            width: '2.5rem',\n            height: '2.5rem',\n            borderRadius: '50%',\n            justifyContent: 'center',\n            backgroundColor: chipTextColor,\n            '&:hover': {\n              backgroundColor: chipTextColor,\n            },\n            '&:not(:last-child)': {\n              marginBottom: '0.75rem',\n            },\n            '&.Mui-selected': {\n              backgroundColor: listItemActiveBg,\n              '&:hover': {\n                backgroundColor: listItemActiveBg,\n              },\n            },\n            '&.Mui-disabled': {\n              opacity: 0.8,\n            },\n          },\n        },\n      },\n    },\n  };\n};\n\nexport default (customVariables: ThemeVars) =>\n  applicationTheme({\n    ...vars,\n    ...customVariables,\n  });\n"],"names":["ReactDiagramMetaTypes","Position","constructor","x","y","this","_x","_y","value","add","otherPosition","sub","MetaNodeModel","NodeModel","options","super","type","META_NODE","addPort","DefaultPortModel","in","name","getGraphPath","getOptions","getLocalPosition","calculateLocalPosition","parent","worldPosition","getX","getY","parentWorldPosition","updateLocalPosition","setContainerBoundingBox","containerBoundingBox","MetaLinkModel","DefaultLinkModel","META_LINK","UnknownTypeWidget","React","MetaNodeFactory","AbstractReactFactory","componentsMap","generateModel","generateReactWidget","event","has","model","shape","ReactComponentType","get","key","id","engine","MetaLinkFactory","DefaultLinkFactory","generateLinkSegment","selected","path","_model$getOptions","vars","fontFamily","primaryBg","textWhite","chipTextColor","chipBgColor","chipPrimaryTextColor","chipPrimaryBgColor","breadcrumbLinkColor","breadcrumbTextColor","buttonPrimaryBgColor","buttonPrimaryBgHoverColor","buttonPrimaryDisabledBgColor","listItemActiveBg","listSelectedTextColor","listBoxShadow","listBorderColor","dividerColor","dropdownBg","dropdownTextColor","overlayColor","progressBg","progressBar","progressShadow","switchShadow","useStyles","makeStyles","root","zIndex","width","background","boxShadow","borderRadius","position","left","top","transform","&.right","right","& .MuiList-root","padding","node","margin","& .MuiDivider-root","borderColor","border","borderTop","& img","display","Sidebar","classes","Box","className","List","disablePadding","component","ListItemButton","ListItemIcon","src","Buffer","toString","alt","Divider","disabled","UnknownParent","Error","Object","setPrototypeOf","prototype","BoundingBox","bottom","_left","_top","_right","_bottom","getWidth","getHeight","Graph","metaNodeModel","children","Map","getID","getRoot","getChild","addChild","graph","set","getChildren","Array","from","values","map","g","getDescendancy","descendancy","push","dfs","found","getContainerBoundingBox","height","child","childBox","MetaGraph","roots","addNode","length","pop","findNodeGraph","getNodes","nodes","undefined","getParent","getNodeDFS","nodeId","getNodeContainerBoundingBox","rootId","shift","next","handleNodePositionChanged","updateChildrenPosition","updateNodeLocalPosition","forEach","n","localPosition","setPosition","updateNodesContainerBoundingBoxes","_","container","canvasContainer","nodesMap","linksMap","links","sourceId","sourcePortId","targetId","targetPortId","getSourceId","getSourcePortId","getTargetId","getTargetPortId","toModel","fromEntries","getId","graphPath","getWorldPosition","_this$parent","getDepth","optionsMap","metaNodes","metaLinks","wrapperClassName","metaTheme","createEngine","getNodeFactories","registerFactory","getLinkFactories","metaGraph","sort","a","b","mn","generateMetaGraph","DiagramModel","callback","entity","repaintCanvas","registerListener","positionChanged","ml","metaLink","link","source","target","setSourcePort","getPort","setTargetPort","getLinkModel","filter","mlm","addAll","setModel","useEffect","nodesUpdated","containerClassName","ThemeProvider","theme","createTheme","customVariables","customThemeVariables","params","components","MuiCssBaseline","styleOverrides","MuiList","&.customSwitch","& .MuiListItemButton-root","alignItems","justifyContent","&:not(:last-child)","marginBottom","&.Mui-disabled","opacity","&.Mui-selected","& .MuiTypography-root","color","& .MuiChip-root","marginLeft","fontWeight","fontSize","lineHeight","letterSpacing","MuiListItemIcon","minWidth","MuiListItemButton","backgroundColor","&:hover","applicationTheme","CssBaseline","CanvasWidget","canvasClassName"],"mappings":"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"}