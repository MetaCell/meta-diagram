{"version":3,"file":"meta-diagram.cjs.production.min.js","sources":["../src/constants.ts","../src/models/Position.ts","../src/helpers/nodesHelper.ts","../src/react-diagrams/MetaNodeModel.ts","../src/react-diagrams/MetaLinkModel.ts","../src/components/UnknownTypeWidget.tsx","../src/react-diagrams/MetaNodeFactory.tsx","../src/react-diagrams/MetaLinkFactory.tsx","../src/components/assets/styles/variables.ts","../src/components/Sidebar.tsx","../src/index.tsx","../src/models/ComponentsMap.ts","../src/models/MetaLink.ts","../src/models/MetaNode.ts","../src/helpers/engineHelper.ts","../src/helpers/linksHelper.ts","../src/theme.ts"],"sourcesContent":["export enum ReactDiagramMetaTypes {\n  META_NODE = 'meta-node-type',\n  META_LINK = 'meta-link-type',\n}\n","export class Position {\n  x: number;\n  y: number;\n\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n\n  add(otherPosition: Position) : Position {\n    return new Position(this.x+ otherPosition.x, this.y + otherPosition.y)\n  }\n\n  sub(otherPosition: Position) : Position {\n    return new Position(this.x - otherPosition.x, this.y - otherPosition.y)\n  }\n}\n","import { MetaNodeModel } from '../react-diagrams/MetaNodeModel';\nimport {MetaNode} from \"../models/MetaNode\";\nimport {BaseEntityEvent} from \"@projectstorm/react-canvas-core\";\nimport {NodeModel, NodeModelGenerics} from \"@projectstorm/react-diagrams\";\n\nexport function getNode(\n  id: string,\n  nodes: MetaNodeModel[]\n): MetaNodeModel | undefined {\n  return nodes.find(n => n.getOptions().id === id);\n}\n\nexport function processNodes(metaNodes: MetaNode[], callback: { (event: any): void; (arg0: BaseEntityEvent<NodeModel<NodeModelGenerics>>): void; }) : MetaNodeModel[] {\n  const metaNodeModels = []\n  for(const mn of metaNodes){\n    const metaNodeModel = mn.toModel()\n    const position = mn.getWorldPosition()\n    metaNodeModel.setPosition(position.x, position.y)\n    // @ts-ignore\n    metaNodeModel.registerListener({positionChanged: (event => callback(event))})\n    metaNodeModels.push(metaNodeModel)\n  }\n  return metaNodeModels\n}\n","import { DefaultPortModel, NodeModel } from '@projectstorm/react-diagrams';\nimport { ReactDiagramMetaTypes } from '../constants';\nimport {Position} from \"../models/Position\";\nimport {getNode} from \"../helpers/nodesHelper\";\n\nexport class MetaNodeModel extends NodeModel {\n  constructor(options = {}) {\n    super({\n      ...options,\n      type: ReactDiagramMetaTypes.META_NODE,\n    });\n\n    // set up an in and out port\n\n    this.addPort(\n      new DefaultPortModel({\n        in: true,\n        name: 'in',\n      })\n    );\n    this.addPort(\n      new DefaultPortModel({\n        in: false,\n        name: 'out',\n      })\n    );\n  }\n\n    getLocalPosition(nodes: MetaNodeModel[]): Position {\n        const worldPosition = new Position(this.getX(), this.getY())\n        // @ts-ignore\n        const parentId = this.options['parentId']\n        const parent = getNode(parentId, nodes)\n        return parent ? worldPosition.sub(parent.getLocalPosition(nodes)) : worldPosition\n    }\n\n    updateLocalPosition(nodes: MetaNodeModel[]) : void {\n        // @ts-ignore\n        this.options['position'] = this.getLocalPosition(nodes)\n    }\n}\n","import { DefaultLinkModel } from '@projectstorm/react-diagrams';\nimport { ReactDiagramMetaTypes } from '../constants';\n\nexport class MetaLinkModel extends DefaultLinkModel {\n  constructor(options = {}) {\n    super({\n      ...options,\n      type: ReactDiagramMetaTypes.META_LINK,\n    });\n  }\n}\n","import React from 'react';\n\nexport const UnknownTypeWidget = () => {\n  return <div>Unknown Type</div>;\n};\n","import { AbstractReactFactory } from '@projectstorm/react-canvas-core';\nimport { MetaNodeModel } from './MetaNodeModel';\nimport { UnknownTypeWidget } from '../components/UnknownTypeWidget';\nimport React from 'react';\nimport { ReactDiagramMetaTypes } from '../constants';\n\nexport class MetaNodeFactory extends AbstractReactFactory {\n  componentsMap: Map<string, React.ComponentType>;\n\n  constructor(componentsMap: Map<string, React.ComponentType>) {\n    super(ReactDiagramMetaTypes.META_NODE);\n    this.componentsMap = componentsMap;\n  }\n\n  generateModel() {\n    return new MetaNodeModel();\n  }\n\n  generateReactWidget(event: any): JSX.Element {\n    if (this.componentsMap.has(event.model.options.shape)) {\n      const ReactComponentType = this.componentsMap.get(\n        event.model.options.shape\n      );\n      return (\n        // @ts-ignore\n        <ReactComponentType\n          key={`node-factory-${event.model.getOptions().id}`}\n          engine={this.engine}\n          model={event.model}\n        />\n      );\n    }\n    // TODO: Generate default node instead\n    return <UnknownTypeWidget />;\n  }\n}\n","import { MetaLinkModel } from './MetaLinkModel';\nimport { UnknownTypeWidget } from '../components/UnknownTypeWidget';\nimport { ReactDiagramMetaTypes } from '../constants';\nimport React from 'react';\nimport { DefaultLinkFactory } from '@projectstorm/react-diagrams';\n\nexport class MetaLinkFactory extends DefaultLinkFactory {\n  componentsMap: Map<string, JSX.Element>;\n\n  constructor(componentsMap: Map<string, JSX.Element>) {\n    super(ReactDiagramMetaTypes.META_LINK);\n    this.componentsMap = componentsMap;\n  }\n\n  generateModel() {\n    return new MetaLinkModel();\n  }\n\n  generateLinkSegment(\n    model: MetaLinkModel,\n    selected: boolean,\n    path: string\n  ): JSX.Element {\n    // @ts-ignore\n    if (this.componentsMap.has(model.getOptions()?.shape)) {\n      const ReactComponentType = this.componentsMap.get(\n        // @ts-ignore\n        model.getOptions().shape\n      );\n\n      return (\n        // @ts-ignore\n        <ReactComponentType\n          key={`link-factory-${model.getOptions().id}`}\n          engine={this.engine}\n          model={model}\n          path={path}\n          selected={selected}\n        />\n      );\n    }\n    // TODO: Generate default link instead\n    return <UnknownTypeWidget />;\n  }\n}\n","const vars = {\n  fontFamily: 'Inter, sans-serif',\n  primaryBg: '#f1f1f1',\n  textWhite: '#FFFFFF',\n  chipTextColor: '#F2F2F7',\n  chipBgColor: 'rgba(60, 60, 67, 0.4)',\n\n  chipPrimaryTextColor: 'rgba(255, 255, 255, 0.8)',\n  chipPrimaryBgColor: 'rgba(0, 122, 255, 0.6)',\n\n  breadcrumbLinkColor: '#A2A2A2',\n  breadcrumbTextColor: '#292929',\n\n  buttonPrimaryBgColor: '4353FF',\n  buttonPrimaryBgHoverColor: '#3443E1',\n  buttonPrimaryDisabledBgColor: 'rgba(0, 122, 255, 0.4)',\n\n  listItemActiveBg: '#007AFF',\n  listSelectedTextColor: '#3C3C43',\n  listBoxShadow:\n    '0 0.1875rem 0.5rem rgba(0, 0, 0, 0.12), 0 0.1875rem 0.0625rem rgba(0, 0, 0, 0.04)',\n  listBorderColor: 'rgba(0, 0, 0, 0.04)',\n\n  dividerColor: 'rgba(118, 120, 125, 0.12)',\n\n  dropdownBg: 'rgba(246, 246, 248, 0.8)',\n  dropdownTextColor: 'rgba(60, 60, 67, 0.6)',\n\n  overlayColor: 'rgba(0, 0, 0, 0.4)',\n\n  progressBg: '#E5E5E5',\n  progressBar: '#017AFF',\n  progressShadow: 'inset 0 0 0.0625rem #E3E3E3',\n\n  switchShadow:\n    '0 0.1875rem 0.5rem rgba(0, 0, 0, 0.15), 0 0.1875rem 0.0625rem rgba(0, 0, 0, 0.06)',\n};\n\nexport default vars;\n","import React from 'react';\nimport { Box } from '@mui/system';\nimport { makeStyles } from '@mui/styles';\nimport vars from './assets/styles/variables';\nimport { Divider, List, ListItemButton, ListItemIcon } from '@mui/material';\nimport Move from './assets/svg/move.svg';\nimport Icon from './assets/svg/icon.svg';\nimport Node from './assets/svg/node.svg';\nimport Cursor from './assets/svg/cursor.svg';\nimport Fullscreen from './assets/svg/fullscreen.svg';\n\nconst { textWhite, dividerColor } = vars;\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    zIndex: '5',\n    width: '4rem',\n    background: textWhite,\n    boxShadow:\n      '0 0 3.75rem rgba(0, 0, 0, 0.1), 0 0.5rem 2.5rem -0.625rem rgba(0, 0, 0, 0.1)',\n    borderRadius: '2rem',\n    position: 'fixed',\n    left: '1rem',\n    top: '50%',\n    transform: 'translateY(-50%)',\n\n    '&.right': {\n      left: 'auto',\n      right: '1rem',\n    },\n\n    '& .MuiList-root': {\n      padding: '0.75rem',\n    },\n  },\n\n  node: {\n    margin: '0.25rem 0',\n    '& .MuiDivider-root': {\n      borderColor: dividerColor,\n      width: 'calc(100% - 1.5rem)',\n      margin: '0 auto',\n      border: 'none',\n      borderTop: '0.0625rem solid',\n    },\n\n    '& img': {\n      display: 'block',\n      margin: '1rem 0',\n    },\n  },\n}));\n\nconst Sidebar = () => {\n  const classes = useStyles();\n  return (\n    <Box className={`${classes.root} left`}>\n      <List disablePadding component=\"nav\">\n        <ListItemButton selected>\n          <ListItemIcon>\n            <img\n              src={`data:image/svg+xml;base64,${new Buffer(Cursor).toString(\n                'base64'\n              )}`}\n              alt=\"icon\"\n            />\n          </ListItemIcon>\n        </ListItemButton>\n\n        <ListItemButton>\n          <ListItemIcon>\n            <img\n              src={`data:image/svg+xml;base64,${new Buffer(Move).toString(\n                'base64'\n              )}`}\n              alt=\"move\"\n            />\n          </ListItemIcon>\n        </ListItemButton>\n      </List>\n\n      <Box className={classes.node}>\n        <Divider />\n        <img\n          src={`data:image/svg+xml;base64,${new Buffer(Node).toString(\n            'base64'\n          )}`}\n          alt=\"node\"\n        />\n        <Divider />\n      </Box>\n\n      <List disablePadding component=\"nav\">\n        <ListItemButton disabled>\n          <ListItemIcon>\n            <img\n              src={`data:image/svg+xml;base64,${new Buffer(Icon).toString(\n                'base64'\n              )}`}\n              alt=\"icon\"\n            />\n          </ListItemIcon>\n        </ListItemButton>\n\n        <ListItemButton>\n          <ListItemIcon>\n            <img\n              src={`data:image/svg+xml;base64,${new Buffer(Fullscreen).toString(\n                'base64'\n              )}`}\n              alt=\"fullscreen\"\n            />\n          </ListItemIcon>\n        </ListItemButton>\n      </List>\n    </Box>\n  );\n};\n\nexport default Sidebar;\n","import * as React from 'react';\nimport { MetaNode } from './models/MetaNode';\nimport { MetaLink } from './models/MetaLink';\nimport { ComponentsMap } from './models/ComponentsMap';\nimport createEngine, { DiagramModel } from '@projectstorm/react-diagrams';\nimport { MetaNodeFactory } from './react-diagrams/MetaNodeFactory';\nimport { MetaLinkFactory } from './react-diagrams/MetaLinkFactory';\nimport { CanvasWidget } from '@projectstorm/react-canvas-core';\nimport { MetaNodeModel } from './react-diagrams/MetaNodeModel';\nimport { getLinkModel } from './helpers/linksHelper';\nimport { makeStyles } from '@mui/styles';\nimport Sidebar from './components/Sidebar';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport theme from './theme';\nimport { Box } from '@mui/material';\nimport {processNodes} from \"./helpers/nodesHelper\";\nimport {updateChildrenPosition} from \"./helpers/engineHelper\";\n\nconst useStyles = makeStyles(_ => ({\n  container: {\n    height: '100%',\n    width: '100%',\n  },\n  canvasContainer: {\n    height: '100%',\n    width: '100%',\n    background: '#fffff',\n  },\n}));\n\ninterface MetaDiagramProps {\n  metaNodes: MetaNode[];\n  metaLinks: MetaLink[];\n  componentsMap: ComponentsMap;\n  wrapperClassName?: string;\n  canvasClassName?: string;\n  metaTheme: {\n    customThemeVariables: {};\n    canvasClassName: string;\n  };\n}\n\nconst MetaDiagram = ({\n  metaNodes,\n  metaLinks,\n  componentsMap,\n  wrapperClassName,\n  metaTheme,\n}: MetaDiagramProps) => {\n  const classes = useStyles();\n\n  // set up the diagram engine\n  const engine = createEngine();\n\n  engine\n    .getNodeFactories()\n    // @ts-ignore\n    .registerFactory(new MetaNodeFactory(componentsMap.nodes));\n\n  engine\n    .getLinkFactories()\n    // @ts-ignore\n    .registerFactory(new MetaLinkFactory(componentsMap.links));\n\n  // @ts-ignore\n  const repaintCanvas = (event: any) => {\n    let model = engine.getModel();\n    const node = event.entity\n    const nodes = model.getNodes()\n    // @ts-ignore\n    updateChildrenPosition(nodes, node)\n    // @ts-ignore\n    // updateNodeLocalPosition(nodes, node)\n    engine.repaintCanvas();\n  }\n\n  // set up the diagram model\n\n  const model = new DiagramModel();\n  const nodes = processNodes(metaNodes, repaintCanvas)\n\n  const links = metaLinks\n    .map(ml => getLinkModel(ml, nodes))\n    .filter(mlm => mlm !== undefined);\n  // @ts-ignore\n  model.addAll(...nodes, ...links);\n\n  // load model into engine\n  engine.setModel(model);\n\n  const containerClassName = wrapperClassName\n    ? wrapperClassName\n    : classes.container;\n\n  return (\n    <ThemeProvider theme={createTheme(theme(metaTheme?.customThemeVariables))}>\n      <CssBaseline />\n      <Box className={containerClassName}>\n        <Sidebar />\n        <CanvasWidget\n          className={`${classes.canvasContainer} ${metaTheme?.canvasClassName}`}\n          engine={engine}\n        />\n      </Box>\n    </ThemeProvider>\n  );\n};\n\nexport default MetaDiagram;\nexport { MetaNode, MetaLink, MetaNodeModel, ComponentsMap };\nexport { MetaLinkModel } from './react-diagrams/MetaLinkModel';\nexport { Position } from './models/Position';\n","import React from 'react';\n\nexport class ComponentsMap {\n  nodes: Map<string, React.ComponentType>;\n  links: Map<string, React.ComponentType>;\n\n  constructor(\n    nodesMap: Map<string, React.ComponentType>,\n    linksMap: Map<string, React.ComponentType>\n  ) {\n    this.nodes = nodesMap;\n    this.links = linksMap;\n  }\n}\n","import { ILink } from './ILink';\nimport {MetaLinkModel} from \"../react-diagrams/MetaLinkModel\";\n\nexport class MetaLink implements ILink {\n  sourceId: string;\n  sourcePortId: string;\n  targetId: string;\n  targetPortId: string;\n  options: Map<string, any>;\n\n  constructor(\n    id: string,\n    name: string,\n    shape: string,\n    sourceId: string,\n    sourcePortId: string,\n    targetId: string,\n    targetPortId: string,\n    options: Map<string, any>\n  ) {\n    this.sourceId = sourceId;\n    this.sourcePortId = sourcePortId;\n    this.targetId = targetId;\n    this.targetPortId = targetPortId;\n    this.options = options;\n    this.options.set('id', id);\n    this.options.set('name', name);\n    this.options.set('shape', shape);\n  }\n\n  getSourceId(): string {\n    return this.sourceId;\n  }\n\n  getSourcePortId(): string {\n    return this.sourcePortId;\n  }\n\n  getTargetId(): string {\n    return this.targetId;\n  }\n\n  getTargetPortId(): string {\n    return this.targetPortId;\n  }\n\n  toModel(): MetaLinkModel {\n    return new MetaLinkModel(Object.fromEntries(this.options))\n  }\n}\n","import { Position } from './Position';\nimport {MetaNodeModel} from \"../react-diagrams/MetaNodeModel\";\n\nexport class MetaNode {\n  private readonly parent: MetaNode | undefined;\n  private readonly position: Position;\n  private readonly options: Map<string, any>;;\n\n  constructor(\n    id: string,\n    name: string,\n    shape: string,\n    position: Position,\n    parent: MetaNode | undefined,\n    options: Map<string, any>\n  ) {\n    this.parent = parent\n    this.position = position\n    this.options = options\n    this.options.set('id', id);\n    this.options.set('name', name);\n    this.options.set('shape', shape);\n  }\n\n  getId() : string{\n    return this.options.get('id')\n  }\n\n  getParentId() : string | undefined {\n    return this.parent?.getId()\n  }\n\n  getWorldPosition() : Position {\n    return this.parent ? this.position.add(this.parent?.getWorldPosition()) : this.position\n  }\n\n  toModel() : MetaNodeModel {\n    const optionsMap = this.options\n    optionsMap.set('parentId', this.getParentId())\n    optionsMap.set('position', this.position)\n    return new MetaNodeModel(Object.fromEntries(optionsMap))\n  }\n\n}\n","import {MetaNodeModel} from \"../react-diagrams/MetaNodeModel\";\n\nexport function updateChildrenPosition(nodes: MetaNodeModel[], parent: MetaNodeModel): void {\n    // @ts-ignore\n    const children = nodes.filter(n => n.options['parentId'] == parent.options['id']);\n    children.forEach(n => {\n        // @ts-ignore\n        n.setPosition(parent.getX() + n.options['position'].x, parent.getY() + n.options['position'].y)\n        // TODO: Fix nested position update\n        // updateChildrenPosition(nodes, n)\n    })\n}\n\nexport function updateNodeLocalPosition(nodes: MetaNodeModel[], node: MetaNodeModel): void {\n    node.updateLocalPosition(nodes)\n}","import { MetaLink } from '../models/MetaLink';\nimport { MetaLinkModel } from '../react-diagrams/MetaLinkModel';\nimport { MetaNodeModel } from '../react-diagrams/MetaNodeModel';\nimport { getNode } from './nodesHelper';\n\nexport function getLinkModel(\n  metaLink: MetaLink,\n  nodes: MetaNodeModel[]\n): MetaLinkModel | undefined {\n  const link = metaLink.toModel();\n  const source = getNode(metaLink.getSourceId(), nodes);\n  const target = getNode(metaLink.getTargetId(), nodes);\n  if (source && target) {\n    link.setSourcePort(source.getPort(metaLink.getSourcePortId()));\n    link.setTargetPort(target.getPort(metaLink.getTargetPortId()));\n    return link;\n  }\n  return undefined;\n}\n","import vars from './components/assets/styles/variables';\n\ntype ThemeVars = {\n  [key: string]: any;\n};\n\nconst applicationTheme = (params: ThemeVars) => {\n  const {\n    primaryBg,\n    fontFamily,\n    chipTextColor,\n    chipBgColor,\n    textWhite,\n    listItemActiveBg,\n    listSelectedTextColor,\n    listBoxShadow,\n    listBorderColor,\n  } = params;\n  return {\n    components: {\n      MuiCssBaseline: {\n        styleOverrides: `\n          html {\n            background: ${primaryBg};\n            font-family: ${fontFamily};\n          }\n          body {\n            background-color:${primaryBg};\n            font-family: ${fontFamily};\n            font-size: 1rem;\n          }\n        `,\n      },\n      MuiList: {\n        styleOverrides: {\n          root: {\n            '&.customSwitch': {\n              padding: '0.125rem',\n              background: chipTextColor,\n              borderRadius: '0.5rem',\n              display: 'flex',\n              '& .MuiListItemButton-root': {\n                padding: '0.25rem 0.75rem',\n                borderRadius: '0.4375rem',\n                width: '10.59375rem',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                '&:not(:last-child)': {\n                  marginBottom: '0',\n                },\n                '&.Mui-disabled': {\n                  opacity: 1,\n                },\n                '&.Mui-selected': {\n                  background: textWhite,\n                  boxShadow: listBoxShadow,\n                  border: `0.03125rem solid ${listBorderColor}`,\n                  '& .MuiTypography-root': {\n                    color: listSelectedTextColor,\n                  },\n                },\n              },\n              '& .MuiChip-root': {\n                marginLeft: '0.25rem',\n              },\n              '& .MuiTypography-root': {\n                fontWeight: 500,\n                fontSize: '0.8125rem',\n                lineHeight: '1.25rem',\n                letterSpacing: '-0.005rem',\n                color: chipBgColor,\n                margin: 0,\n              },\n            },\n          },\n        },\n      },\n      MuiListItemIcon: {\n        styleOverrides: {\n          root: {\n            minWidth: 'inherit',\n          },\n        },\n      },\n      MuiListItemButton: {\n        styleOverrides: {\n          root: {\n            padding: 0,\n            width: '2.5rem',\n            height: '2.5rem',\n            borderRadius: '50%',\n            justifyContent: 'center',\n            backgroundColor: chipTextColor,\n            '&:hover': {\n              backgroundColor: chipTextColor,\n            },\n            '&:not(:last-child)': {\n              marginBottom: '0.75rem',\n            },\n            '&.Mui-selected': {\n              backgroundColor: listItemActiveBg,\n              '&:hover': {\n                backgroundColor: listItemActiveBg,\n              },\n            },\n            '&.Mui-disabled': {\n              opacity: 0.8,\n            },\n          },\n        },\n      },\n    },\n  };\n};\n\nexport default (customVariables: ThemeVars) =>\n  applicationTheme({\n    ...vars,\n    ...customVariables,\n  });\n"],"names":["ReactDiagramMetaTypes","Position","constructor","x","y","this","add","otherPosition","sub","getNode","id","nodes","find","n","getOptions","MetaNodeModel","NodeModel","options","super","type","META_NODE","addPort","DefaultPortModel","in","name","getLocalPosition","worldPosition","getX","getY","parent","updateLocalPosition","MetaLinkModel","DefaultLinkModel","META_LINK","UnknownTypeWidget","React","MetaNodeFactory","AbstractReactFactory","componentsMap","generateModel","generateReactWidget","event","has","model","shape","ReactComponentType","get","key","engine","MetaLinkFactory","DefaultLinkFactory","generateLinkSegment","selected","path","_model$getOptions","vars","fontFamily","primaryBg","textWhite","chipTextColor","chipBgColor","chipPrimaryTextColor","chipPrimaryBgColor","breadcrumbLinkColor","breadcrumbTextColor","buttonPrimaryBgColor","buttonPrimaryBgHoverColor","buttonPrimaryDisabledBgColor","listItemActiveBg","listSelectedTextColor","listBoxShadow","listBorderColor","dividerColor","dropdownBg","dropdownTextColor","overlayColor","progressBg","progressBar","progressShadow","switchShadow","useStyles","makeStyles","root","zIndex","width","background","boxShadow","borderRadius","position","left","top","transform","&.right","right","& .MuiList-root","padding","node","margin","& .MuiDivider-root","borderColor","border","borderTop","& img","display","Sidebar","classes","Box","className","List","disablePadding","component","ListItemButton","ListItemIcon","src","Buffer","toString","alt","Divider","disabled","_","container","height","canvasContainer","nodesMap","linksMap","links","sourceId","sourcePortId","targetId","targetPortId","set","getSourceId","getSourcePortId","getTargetId","getTargetPortId","toModel","Object","fromEntries","getId","getParentId","_this$parent","getWorldPosition","_this$parent2","optionsMap","metaNodes","metaLinks","wrapperClassName","metaTheme","createEngine","getNodeFactories","registerFactory","getLinkFactories","DiagramModel","callback","metaNodeModels","mn","metaNodeModel","setPosition","registerListener","positionChanged","push","processNodes","getModel","entity","filter","forEach","updateChildrenPosition","getNodes","repaintCanvas","map","ml","metaLink","link","source","target","setSourcePort","getPort","setTargetPort","getLinkModel","mlm","undefined","addAll","setModel","containerClassName","ThemeProvider","theme","createTheme","customVariables","customThemeVariables","params","components","MuiCssBaseline","styleOverrides","MuiList","&.customSwitch","& .MuiListItemButton-root","alignItems","justifyContent","&:not(:last-child)","marginBottom","&.Mui-disabled","opacity","&.Mui-selected","& .MuiTypography-root","color","& .MuiChip-root","marginLeft","fontWeight","fontSize","lineHeight","letterSpacing","MuiListItemIcon","minWidth","MuiListItemButton","backgroundColor","&:hover","applicationTheme","CssBaseline","CanvasWidget","canvasClassName"],"mappings":"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"}