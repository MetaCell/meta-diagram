{"version":3,"file":"meta-diagram.cjs.production.min.js","sources":["../src/constants.ts","../src/models/MetaOptions.ts","../src/react-diagrams/MetaNodeModel.ts","../src/components/UnknownTypeWidget.tsx","../src/react-diagrams/MetaNodeFactory.tsx","../src/react-diagrams/MetaLinkModel.ts","../src/react-diagrams/MetaLinkFactory.tsx","../src/helpers/nodesHelper.ts","../src/components/assets/styles/variables.ts","../src/components/Sidebar.tsx","../src/index.tsx","../src/models/ComponentsMap.ts","../src/models/MetaLink.ts","../src/models/MetaNode.ts","../src/models/Position.ts","../src/helpers/linksHelper.ts","../src/theme.ts"],"sourcesContent":["export enum ReactDiagramMetaTypes {\n  META_NODE = 'meta-node-type',\n  META_LINK = 'meta-link-type',\n}\n","import { IShape } from './IShape';\nimport { IId } from './IId';\n\nexport class MetaOptions implements IShape, IId {\n  options: Map<string, any>;\n\n  constructor(\n    id: string,\n    name: string,\n    shape: string,\n    options: Map<string, any>\n  ) {\n    this.options = options;\n    this.options.set('id', id);\n    this.options.set('name', name);\n    this.options.set('shape', shape);\n  }\n\n  getId(): string {\n    return this.options.get('id');\n  }\n\n  getShape(): string {\n    return this.options.get('shape');\n  }\n}\n","import { DefaultPortModel, NodeModel } from '@projectstorm/react-diagrams';\nimport { ReactDiagramMetaTypes } from '../constants';\n\nexport class MetaNodeModel extends NodeModel {\n  constructor(options = {}) {\n    super({\n      ...options,\n      type: ReactDiagramMetaTypes.META_NODE,\n    });\n\n    // set up an in and out port\n\n    this.addPort(\n      new DefaultPortModel({\n        in: true,\n        name: 'in',\n      })\n    );\n    this.addPort(\n      new DefaultPortModel({\n        in: false,\n        name: 'out',\n      })\n    );\n  }\n}\n","import React from 'react';\n\nexport const UnknownTypeWidget = () => {\n  return <div>Unknown Type</div>;\n};\n","import { AbstractReactFactory } from '@projectstorm/react-canvas-core';\nimport { MetaNodeModel } from './MetaNodeModel';\nimport { UnknownTypeWidget } from '../components/UnknownTypeWidget';\nimport React from 'react';\nimport { ReactDiagramMetaTypes } from '../constants';\n\nexport class MetaNodeFactory extends AbstractReactFactory {\n  componentsMap: Map<string, React.ComponentType>;\n\n  constructor(componentsMap: Map<string, React.ComponentType>) {\n    super(ReactDiagramMetaTypes.META_NODE);\n    this.componentsMap = componentsMap;\n  }\n\n  generateModel() {\n    return new MetaNodeModel();\n  }\n\n  generateReactWidget(event: any): JSX.Element {\n    if (this.componentsMap.has(event.model.options.shape)) {\n      const ReactComponentType = this.componentsMap.get(\n        event.model.options.shape\n      );\n      // @ts-ignore\n      return <ReactComponentType engine={this.engine} model={event.model} />;\n    }\n    // TODO: Generate default node instead\n    return <UnknownTypeWidget />;\n  }\n}\n","import { DefaultLinkModel } from '@projectstorm/react-diagrams';\nimport { ReactDiagramMetaTypes } from '../constants';\n\nexport class MetaLinkModel extends DefaultLinkModel {\n  constructor(options = {}) {\n    super({\n      ...options,\n      type: ReactDiagramMetaTypes.META_LINK,\n    });\n  }\n}\n","import { MetaLinkModel } from './MetaLinkModel';\nimport { UnknownTypeWidget } from '../components/UnknownTypeWidget';\nimport { ReactDiagramMetaTypes } from '../constants';\nimport React from 'react';\nimport { DefaultLinkFactory } from '@projectstorm/react-diagrams';\n\nexport class MetaLinkFactory extends DefaultLinkFactory {\n  componentsMap: Map<string, JSX.Element>;\n\n  constructor(componentsMap: Map<string, JSX.Element>) {\n    super(ReactDiagramMetaTypes.META_LINK);\n    this.componentsMap = componentsMap;\n  }\n\n  generateModel() {\n    return new MetaLinkModel();\n  }\n\n  generateLinkSegment(\n    model: MetaLinkModel,\n    selected: boolean,\n    path: string\n  ): JSX.Element {\n    // @ts-ignore\n    if (this.componentsMap.has(model.getOptions()?.shape)) {\n      const ReactComponentType = this.componentsMap.get(\n        // @ts-ignore\n        model.getOptions().shape\n      );\n\n      return (\n        // @ts-ignore\n        <ReactComponentType\n          engine={this.engine}\n          model={model}\n          path={path}\n          selected={selected}\n        />\n      );\n    }\n    // TODO: Generate default link instead\n    return <UnknownTypeWidget />;\n  }\n}\n","import { MetaNodeModel } from '../react-diagrams/MetaNodeModel';\n\nexport function getNode(\n  id: string,\n  nodes: MetaNodeModel[]\n): MetaNodeModel | undefined {\n  return nodes.find(n => n.getOptions().id === id);\n}\n","const vars = {\n  fontFamily: 'Inter, sans-serif',\n  primaryBg: '#f1f1f1',\n  textWhite: '#FFFFFF',\n  chipTextColor: '#F2F2F7',\n  chipBgColor: 'rgba(60, 60, 67, 0.4)',\n\n  chipPrimaryTextColor: 'rgba(255, 255, 255, 0.8)',\n  chipPrimaryBgColor: 'rgba(0, 122, 255, 0.6)',\n\n  breadcrumbLinkColor: '#A2A2A2',\n  breadcrumbTextColor: '#292929',\n\n  buttonPrimaryBgColor: '4353FF',\n  buttonPrimaryBgHoverColor: '#3443E1',\n  buttonPrimaryDisabledBgColor: 'rgba(0, 122, 255, 0.4)',\n\n  listItemActiveBg: '#007AFF',\n  listSelectedTextColor: '#3C3C43',\n  listBoxShadow:\n    '0 0.1875rem 0.5rem rgba(0, 0, 0, 0.12), 0 0.1875rem 0.0625rem rgba(0, 0, 0, 0.04)',\n  listBorderColor: 'rgba(0, 0, 0, 0.04)',\n\n  dividerColor: 'rgba(118, 120, 125, 0.12)',\n\n  dropdownBg: 'rgba(246, 246, 248, 0.8)',\n  dropdownTextColor: 'rgba(60, 60, 67, 0.6)',\n\n  overlayColor: 'rgba(0, 0, 0, 0.4)',\n\n  progressBg: '#E5E5E5',\n  progressBar: '#017AFF',\n  progressShadow: 'inset 0 0 0.0625rem #E3E3E3',\n\n  switchShadow:\n    '0 0.1875rem 0.5rem rgba(0, 0, 0, 0.15), 0 0.1875rem 0.0625rem rgba(0, 0, 0, 0.06)',\n\n  sidebarBg: '#ffffff',\n  sidebarShadow: `0 0 3.75rem rgba(0, 0, 0, 0.1),\n  0 0.5rem 2.5rem -0.625rem rgba(0, 0, 0, 0.1)`,\n  canvasBg: '#fff',\n  showPropertiesButtonBg: '#161A1E',\n  nodeBorderColor: '#18A0FB',\n  nodePointerBg: '#fff',\n  nodeButtonTextColor: 'rgba(255, 255, 255, 0.8)',\n  nodeButtonLineColor: 'rgba(255, 255, 255, 0.2)'\n};\n\nexport default vars;\n","import React from 'react';\nimport { Box } from '@mui/system';\nimport { makeStyles } from '@mui/styles';\nimport vars from './assets/styles/variables';\nimport { Divider, List, ListItemButton, ListItemIcon } from '@mui/material';\nimport Move from './assets/svg/move.svg';\nimport MoveActive from './assets/svg/move-active.svg';\nimport Icon from './assets/svg/icon.svg';\nimport IconActive from './assets/svg/icon-active.svg';\nimport Node from './assets/svg/node.svg';\nimport Cursor from './assets/svg/cursor.svg';\nimport CursorActive from './assets/svg/cursor-active.svg';\nimport Fullscreen from './assets/svg/fullscreen.svg';\nimport FullscreenActive from './assets/svg/fullscreen-active.svg';\n\nconst { dividerColor } = vars;\n\nconst useStyles = makeStyles(() => ({\n  node: {\n    margin: '0.25rem 0',\n    '& .MuiDivider-root': {\n      borderColor: dividerColor,\n      width: 'calc(100% - 1.5rem)',\n      margin: '0 auto',\n      border: 'none',\n      borderTop: '0.0625rem solid',\n    },\n\n    '& img': {\n      display: 'block',\n      margin: '1rem 0',\n    },\n  },\n}));\n\nconst Sidebar = () => {\n  const classes = useStyles();\n  const [selected, setSelected] = React.useState(\"1\");\n\n  return (\n    <Box className=\"sidebar\">\n      <List disablePadding component=\"nav\">\n        <ListItemButton selected={selected === \"1\"} onClick={() => setSelected(\"1\")}>\n          <ListItemIcon>\n            {selected === \"1\" ? <img\n              src={`data:image/svg+xml;base64,${new Buffer(CursorActive).toString(\n                'base64'\n              )}`}\n              alt=\"icon\"\n            /> : <img\n              src={`data:image/svg+xml;base64,${new Buffer(Cursor).toString(\n                'base64'\n              )}`}\n              alt=\"icon\"\n            />}\n          </ListItemIcon>\n        </ListItemButton>\n\n        <ListItemButton selected={selected === \"2\"} onClick={() => setSelected(\"2\")}>\n          <ListItemIcon>\n            {selected === \"2\" ? <img\n              src={`data:image/svg+xml;base64,${new Buffer(MoveActive).toString(\n                'base64'\n              )}`}\n              alt=\"move\"\n            /> : <img\n              src={`data:image/svg+xml;base64,${new Buffer(Move).toString(\n                'base64'\n              )}`}\n              alt=\"move\"\n            />}\n\n          </ListItemIcon>\n        </ListItemButton>\n      </List>\n\n      <Box className={classes.node}>\n        <Divider />\n        <img\n          src={`data:image/svg+xml;base64,${new Buffer(Node).toString(\n            'base64'\n          )}`}\n          alt=\"node\"\n        />\n        <Divider />\n      </Box>\n\n      <List disablePadding component=\"nav\">\n        <ListItemButton selected={selected === \"3\"} onClick={() => setSelected(\"3\")}>\n          <ListItemIcon>\n            {selected === \"3\" ? <img\n              src={`data:image/svg+xml;base64,${new Buffer(IconActive).toString(\n                'base64'\n              )}`}\n              alt=\"icon\"\n            /> : <img\n              src={`data:image/svg+xml;base64,${new Buffer(Icon).toString(\n                'base64'\n              )}`}\n              alt=\"icon\"\n            />}\n          </ListItemIcon>\n        </ListItemButton>\n\n        <ListItemButton selected={selected === \"4\"} onClick={() => setSelected(\"4\")}>\n          <ListItemIcon>\n            {selected === \"4\" ? <img\n              src={`data:image/svg+xml;base64,${new Buffer(FullscreenActive).toString(\n                'base64'\n              )}`}\n              alt=\"fullscreen\"\n            /> : <img\n              src={`data:image/svg+xml;base64,${new Buffer(Fullscreen).toString(\n                'base64'\n              )}`}\n              alt=\"fullscreen\"\n            />}\n          </ListItemIcon>\n        </ListItemButton>\n      </List>\n    </Box>\n  );\n};\n\nexport default Sidebar;\n","import * as React from 'react';\nimport { MetaNode } from './models/MetaNode';\nimport { MetaLink } from './models/MetaLink';\nimport { ComponentsMap } from './models/ComponentsMap';\nimport createEngine, { DiagramModel } from '@projectstorm/react-diagrams';\nimport { MetaNodeFactory } from './react-diagrams/MetaNodeFactory';\nimport { MetaLinkFactory } from './react-diagrams/MetaLinkFactory';\nimport { CanvasWidget } from '@projectstorm/react-canvas-core';\nimport { MetaNodeModel } from './react-diagrams/MetaNodeModel';\nimport { getLinkModel } from './helpers/linksHelper';\nimport { makeStyles } from '@mui/styles';\nimport Sidebar from './components/Sidebar';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport theme from './theme';\nimport { Box } from '@mui/material';\n\nconst useStyles = makeStyles(_ => ({\n  container: {\n    height: '100%',\n    width: '100%',\n  },\n  canvasContainer: {\n    height: '100%',\n    width: '100%',\n    background: '#fffff',\n  },\n}));\n\ninterface MetaDiagramProps {\n  metaNodes: MetaNode[];\n  metaLinks: MetaLink[];\n  componentsMap: ComponentsMap;\n  wrapperClassName?: string;\n  canvasClassName?: string;\n  metaTheme: {\n    customThemeVariables: {};\n    canvasClassName: string;\n  };\n}\n\nconst MetaDiagram = ({\n  metaNodes,\n  metaLinks,\n  componentsMap,\n  wrapperClassName,\n  metaTheme,\n}: MetaDiagramProps) => {\n  const classes = useStyles();\n\n  // set up the diagram engine\n  const engine = createEngine();\n\n  engine\n    .getNodeFactories()\n    // @ts-ignore\n    .registerFactory(new MetaNodeFactory(componentsMap.nodes));\n\n  engine\n    .getLinkFactories()\n    // @ts-ignore\n    .registerFactory(new MetaLinkFactory(componentsMap.links));\n\n  // set up the diagram model\n\n  const model = new DiagramModel();\n  const nodes = metaNodes.map(\n    mn => new MetaNodeModel(Object.fromEntries(mn.options.options))\n  );\n  const links = metaLinks\n    .map(ml => getLinkModel(ml, nodes))\n    .filter(mlm => mlm !== undefined);\n  // @ts-ignore\n  model.addAll(...nodes, ...links);\n\n  // load model into engine\n  engine.setModel(model);\n\n  const containerClassName = wrapperClassName\n    ? wrapperClassName\n    : classes.container;\n\n  return (\n    <ThemeProvider theme={createTheme(theme(metaTheme?.customThemeVariables))}>\n      <CssBaseline />\n      <Box className={containerClassName}>\n        <Sidebar />\n        <CanvasWidget\n          className={`canvas-widget ${metaTheme?.canvasClassName}`}\n          engine={engine}\n        />\n      </Box>\n    </ThemeProvider>\n  );\n};\n\nexport default MetaDiagram;\nexport { MetaNode, MetaLink, MetaNodeModel, ComponentsMap };\nexport { MetaLinkModel } from './react-diagrams/MetaLinkModel';\nexport { Position } from './models/Position';\n","import React from 'react';\n\nexport class ComponentsMap {\n  nodes: Map<string, React.ComponentType>;\n  links: Map<string, React.ComponentType>;\n\n  constructor(\n    nodesMap: Map<string, React.ComponentType>,\n    linksMap: Map<string, React.ComponentType>\n  ) {\n    this.nodes = nodesMap;\n    this.links = linksMap;\n  }\n}\n","import { MetaOptions } from './MetaOptions';\nimport { ILink } from './ILink';\n\nexport class MetaLink implements ILink {\n  sourceId: string;\n  sourcePortId: string;\n  targetId: string;\n  targetPortId: string;\n  options: MetaOptions;\n\n  constructor(\n    id: string,\n    name: string,\n    shape: string,\n    sourceId: string,\n    sourcePortId: string,\n    targetId: string,\n    targetPortId: string,\n    options: Map<string, any>\n  ) {\n    this.sourceId = sourceId;\n    this.sourcePortId = sourcePortId;\n    this.targetId = targetId;\n    this.targetPortId = targetPortId;\n    this.options = new MetaOptions(id, name, shape, options);\n  }\n\n  getSourceId(): string {\n    return this.sourceId;\n  }\n\n  getSourcePortId(): string {\n    return this.sourcePortId;\n  }\n\n  getTargetId(): string {\n    return this.targetId;\n  }\n\n  getTargetPortId(): string {\n    return this.targetPortId;\n  }\n}\n","import { MetaOptions } from './MetaOptions';\nimport { Position } from './Position';\n\nexport class MetaNode {\n  children: MetaNode[];\n  options: MetaOptions;\n\n  constructor(\n    id: string,\n    name: string,\n    shape: string,\n    position: Position,\n    options: Map<string, any>\n  ) {\n    this.children = [];\n    options.set('position', position);\n    this.options = new MetaOptions(id, name, shape, options);\n  }\n}\n","export class Position {\n  x: number;\n  y: number;\n\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n}\n","import { MetaLink } from '../models/MetaLink';\nimport { MetaLinkModel } from '../react-diagrams/MetaLinkModel';\nimport { MetaNodeModel } from '../react-diagrams/MetaNodeModel';\nimport { getNode } from './nodesHelper';\n\nexport function getLinkModel(\n  metaLink: MetaLink,\n  nodes: MetaNodeModel[]\n): MetaLinkModel | undefined {\n  const link = new MetaLinkModel(Object.fromEntries(metaLink.options.options));\n  const source = getNode(metaLink.getSourceId(), nodes);\n  const target = getNode(metaLink.getTargetId(), nodes);\n  if (source && target) {\n    link.setSourcePort(source.getPort(metaLink.getSourcePortId()));\n    link.setTargetPort(target.getPort(metaLink.getTargetPortId()));\n    return link;\n  }\n  return undefined;\n}\n","import vars from './components/assets/styles/variables';\n\ntype ThemeVars = {\n  [key: string]: any;\n};\n\nconst applicationTheme = (params: ThemeVars) => {\n  const {\n    primaryBg,\n    fontFamily,\n    chipTextColor,\n    chipBgColor,\n    textWhite,\n    listItemActiveBg,\n    listSelectedTextColor,\n    listBoxShadow,\n    listBorderColor,\n    sidebarBg,\n    sidebarShadow,\n    canvasBg,\n    showPropertiesButtonBg,\n    nodeBorderColor,\n    nodePointerBg,\n    nodeButtonTextColor,\n    nodeButtonLineColor,\n  } = params;\n  return {\n    components: {\n      MuiCssBaseline: {\n        styleOverrides: `\n          html {\n            background: ${primaryBg};\n            font-family: ${fontFamily};\n          }\n          body {\n            background-color:${primaryBg};\n            font-family: ${fontFamily};\n            font-size: 1rem;\n          }\n          .sidebar {\n            z-index: 5;\n            width: 4rem;\n            background: ${sidebarBg};\n            box-shadow: ${sidebarShadow};\n            border-radius: 2rem;\n            position: fixed;\n            left: 1rem;\n            top: 50%;\n            transform: translateY(-50%);\n          }\n\n          .sidebar.right {\n            left: auto;\n            right: 1rem;\n          }\n\n          .sidebar .MuiList-root {\n            padding: 0.75rem\n          }\n\n          .canvas-widget {\n            height: 100%;\n            width: 100%;\n            background-color: ${canvasBg};\n          }\n\n          .node {\n            border: solid 0.0625rem;\n            border-radius: 50%;\n            width: 10rem;\n            height: 10rem;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            flex-direction: column;\n            position: relative;\n          }\n\n          .node img {\n            margin-bottom: 0.25rem\n          }\n\n          .node p {\n            font-weight: 500;\n            font-size: 0.8125rem;\n            line-height: 1.25rem;\n            letter-spacing: -0.005rem;\n            margin: 0;\n          }\n\n          .node-button.MuiButton-root {\n            background-color: ${showPropertiesButtonBg};\n            border-radius: 1.125rem;\n            font-weight: 600;\n            font-size: 0.8125rem;\n            display: flex;\n            line-height: 1rem;\n            letter-spacing: -0.025625rem;\n            color: ${nodeButtonTextColor};\n            margin: 0 !important;\n            width: 9.625rem;\n            padding: 0;\n            height: 2.25rem;\n            position: absolute;\n            top: -2.625rem;\n            font-family: ${fontFamily};\n            text-transform: none;\n            left: 50%;\n            transform: translateX(-50%);\n          }\n\n          .node-button.MuiButton-root:hover {\n            background-color: ${showPropertiesButtonBg};\n          }\n\n          .node-button .icon {\n            width: 1rem;\n            border: solid 0.0625rem;\n            height: 1rem;\n            border-radius: 50%;\n            margin-right: 1.25rem;\n            position: relative;\n          }\n\n          .node-button .icon:after {\n            content: \"\";\n            height: 1.75rem;\n            width: 0.0625rem;\n            display: block;\n            position: absolute;\n            right: -0.625rem;\n            top: 50%;\n            transform: translateY(-50%);\n            background-color: ${nodeButtonLineColor};\n          }\n\n          .nodes {\n            width: 10rem;\n            height: 10rem;\n            border: 0.09375rem solid ${nodeBorderColor};\n            z-index: 99999;\n            position: absolute;\n          }\n\n          .node .pointer {\n            width: 0.625rem;\n            height: 0.625rem;\n            background: ${nodePointerBg};\n            border: 0.09375rem solid ${nodeBorderColor};\n            border-radius: 0.125rem;\n            position: absolute;\n          }\n        `,\n      },\n      MuiList: {\n        styleOverrides: {\n          root: {\n            '&.customSwitch': {\n              padding: '0.125rem',\n              background: chipTextColor,\n              borderRadius: '0.5rem',\n              display: 'flex',\n              '& .MuiListItemButton-root': {\n                padding: '0.25rem 0.75rem',\n                borderRadius: '0.4375rem',\n                width: '10.59375rem',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                '&:not(:last-child)': {\n                  marginBottom: '0',\n                },\n                '&.Mui-disabled': {\n                  opacity: 1,\n                },\n                '&.Mui-selected': {\n                  background: textWhite,\n                  boxShadow: listBoxShadow,\n                  border: `0.03125rem solid ${listBorderColor}`,\n                  '& .MuiTypography-root': {\n                    color: listSelectedTextColor,\n                  },\n                },\n              },\n              '& .MuiChip-root': {\n                marginLeft: '0.25rem',\n              },\n              '& .MuiTypography-root': {\n                fontWeight: 500,\n                fontSize: '0.8125rem',\n                lineHeight: '1.25rem',\n                letterSpacing: '-0.005rem',\n                color: chipBgColor,\n                margin: 0,\n              },\n            },\n          },\n        },\n      },\n      MuiListItemIcon: {\n        styleOverrides: {\n          root: {\n            minWidth: 'inherit',\n          },\n        },\n      },\n      MuiListItemButton: {\n        styleOverrides: {\n          root: {\n            padding: 0,\n            width: '2.5rem',\n            height: '2.5rem',\n            borderRadius: '50%',\n            justifyContent: 'center',\n            backgroundColor: chipTextColor,\n            '&:hover': {\n              backgroundColor: chipTextColor,\n            },\n            '&:not(:last-child)': {\n              marginBottom: '0.75rem',\n            },\n            '&.Mui-selected': {\n              backgroundColor: listItemActiveBg,\n              '&:hover': {\n                backgroundColor: listItemActiveBg,\n              },\n            },\n            '&.Mui-disabled': {\n              opacity: 0.8,\n            },\n          },\n        },\n      },\n    },\n  };\n};\n\nexport default (customVariables: ThemeVars) =>\n  applicationTheme({\n    ...vars,\n    ...customVariables,\n  });\n"],"names":["ReactDiagramMetaTypes","MetaOptions","constructor","id","name","shape","options","this","set","getId","get","getShape","MetaNodeModel","NodeModel","super","type","META_NODE","addPort","DefaultPortModel","in","UnknownTypeWidget","React","MetaNodeFactory","AbstractReactFactory","componentsMap","generateModel","generateReactWidget","event","has","model","ReactComponentType","engine","MetaLinkModel","DefaultLinkModel","META_LINK","MetaLinkFactory","DefaultLinkFactory","generateLinkSegment","selected","path","getOptions","_model$getOptions","getNode","nodes","find","n","vars","fontFamily","primaryBg","textWhite","chipTextColor","chipBgColor","chipPrimaryTextColor","chipPrimaryBgColor","breadcrumbLinkColor","breadcrumbTextColor","buttonPrimaryBgColor","buttonPrimaryBgHoverColor","buttonPrimaryDisabledBgColor","listItemActiveBg","listSelectedTextColor","listBoxShadow","listBorderColor","dividerColor","dropdownBg","dropdownTextColor","overlayColor","progressBg","progressBar","progressShadow","switchShadow","sidebarBg","sidebarShadow","canvasBg","showPropertiesButtonBg","nodeBorderColor","nodePointerBg","nodeButtonTextColor","nodeButtonLineColor","useStyles","makeStyles","node","margin","& .MuiDivider-root","borderColor","width","border","borderTop","& img","display","Sidebar","classes","setSelected","useState","Box","className","List","disablePadding","component","ListItemButton","onClick","ListItemIcon","src","Buffer","toString","alt","Divider","_","container","height","canvasContainer","background","nodesMap","linksMap","links","sourceId","sourcePortId","targetId","targetPortId","getSourceId","getSourcePortId","getTargetId","getTargetPortId","position","children","x","y","metaNodes","metaLinks","wrapperClassName","metaTheme","createEngine","getNodeFactories","registerFactory","getLinkFactories","DiagramModel","map","mn","Object","fromEntries","ml","metaLink","link","source","target","setSourcePort","getPort","setTargetPort","getLinkModel","filter","mlm","undefined","addAll","setModel","containerClassName","ThemeProvider","theme","createTheme","customVariables","customThemeVariables","params","components","MuiCssBaseline","styleOverrides","MuiList","root","&.customSwitch","padding","borderRadius","& .MuiListItemButton-root","alignItems","justifyContent","&:not(:last-child)","marginBottom","&.Mui-disabled","opacity","&.Mui-selected","boxShadow","& .MuiTypography-root","color","& .MuiChip-root","marginLeft","fontWeight","fontSize","lineHeight","letterSpacing","MuiListItemIcon","minWidth","MuiListItemButton","backgroundColor","&:hover","applicationTheme","CssBaseline","CanvasWidget","canvasClassName"],"mappings":"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"}
