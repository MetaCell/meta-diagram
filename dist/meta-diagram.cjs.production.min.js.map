{"version":3,"file":"meta-diagram.cjs.production.min.js","sources":["../src/constants.ts","../src/models/Position.ts","../src/react-diagrams/MetaNodeModel.ts","../src/react-diagrams/MetaLinkModel.ts","../src/components/UnknownTypeWidget.tsx","../src/react-diagrams/MetaNodeFactory.tsx","../src/react-diagrams/MetaLinkFactory.tsx","../src/components/assets/styles/variables.ts","../src/components/Sidebar.tsx","../src/models/Exceptions.ts","../src/models/MetaGraph.ts","../src/index.tsx","../src/models/ComponentsMap.ts","../src/models/MetaLink.ts","../src/models/MetaNode.ts","../src/helpers/nodesHelper.ts","../src/helpers/engineHelper.ts","../src/helpers/linksHelper.ts","../src/theme.ts"],"sourcesContent":["export enum ReactDiagramMetaTypes {\n  META_NODE = 'meta-node-type',\n  META_LINK = 'meta-link-type',\n}\n","export class Position {\n  x: number;\n  y: number;\n\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n\n  add(otherPosition: Position) : Position {\n    return new Position(this.x+ otherPosition.x, this.y + otherPosition.y)\n  }\n\n  sub(otherPosition: Position) : Position {\n    return new Position(this.x - otherPosition.x, this.y - otherPosition.y)\n  }\n\n}\n","import {DefaultPortModel, NodeModel} from '@projectstorm/react-diagrams';\nimport {ReactDiagramMetaTypes} from '../constants';\nimport {Position} from \"../models/Position\";\nimport {MetaGraph} from \"../models/MetaGraph\";\n\nexport class MetaNodeModel extends NodeModel {\n    constructor(options = {}) {\n        super({\n            ...options,\n            type: ReactDiagramMetaTypes.META_NODE,\n        });\n\n        // set up an in and out port\n\n        this.addPort(\n            new DefaultPortModel({\n                in: true,\n                name: 'in',\n            })\n        );\n        this.addPort(\n            new DefaultPortModel({\n                in: false,\n                name: 'out',\n            })\n        );\n    }\n\n\n    getGraphPath(): string[]{\n        // @ts-ignore\n        return [...this.getOptions()['graphPath']]\n    }\n\n    private calculateLocalPosition(metaGraph: MetaGraph): Position {\n        const worldPosition = new Position(this.getX(), this.getY())\n        // @ts-ignore\n        const parent = metaGraph.getParent(this)\n        const parentWorldPosition = parent ? new Position(parent.getX(), parent.getY()): new Position(0,0)\n        return worldPosition.sub(parentWorldPosition)\n    }\n\n    // @ts-ignore\n    getContainerBoundingBox(nodes: MetaNodeModel[]): any {\n        // @ts-ignore\n        // const parentId = this.options['parentId']\n        // const parent = getNode(parentId, nodes)\n        // return\n    }\n\n    updateLocalPosition(metaGraph: MetaGraph): void {\n        // @ts-ignore\n        this.options['localPosition'] =  this.calculateLocalPosition(metaGraph)\n    }\n\n    updateContainerBoundingBox(nodes: MetaNodeModel[]): void {\n        // @ts-ignore\n        this.options['containerBB'] =  this.calculateLocalPosition(nodes)\n    }\n\n}\n","import { DefaultLinkModel } from '@projectstorm/react-diagrams';\nimport { ReactDiagramMetaTypes } from '../constants';\n\nexport class MetaLinkModel extends DefaultLinkModel {\n  constructor(options = {}) {\n    super({\n      ...options,\n      type: ReactDiagramMetaTypes.META_LINK,\n    });\n  }\n}\n","import React from 'react';\n\nexport const UnknownTypeWidget = () => {\n  return <div>Unknown Type</div>;\n};\n","import { AbstractReactFactory } from '@projectstorm/react-canvas-core';\nimport { MetaNodeModel } from './MetaNodeModel';\nimport { UnknownTypeWidget } from '../components/UnknownTypeWidget';\nimport React from 'react';\nimport { ReactDiagramMetaTypes } from '../constants';\n\nexport class MetaNodeFactory extends AbstractReactFactory {\n  componentsMap: Map<string, React.ComponentType>;\n\n  constructor(componentsMap: Map<string, React.ComponentType>) {\n    super(ReactDiagramMetaTypes.META_NODE);\n    this.componentsMap = componentsMap;\n  }\n\n  generateModel() {\n    return new MetaNodeModel();\n  }\n\n  generateReactWidget(event: any): JSX.Element {\n    if (this.componentsMap.has(event.model.options.shape)) {\n      const ReactComponentType = this.componentsMap.get(\n        event.model.options.shape\n      );\n      return (\n        // @ts-ignore\n        <ReactComponentType\n          key={`node-factory-${event.model.getOptions().id}`}\n          engine={this.engine}\n          model={event.model}\n        />\n      );\n    }\n    // TODO: Generate default node instead\n    return <UnknownTypeWidget />;\n  }\n}\n","import { MetaLinkModel } from './MetaLinkModel';\nimport { UnknownTypeWidget } from '../components/UnknownTypeWidget';\nimport { ReactDiagramMetaTypes } from '../constants';\nimport React from 'react';\nimport { DefaultLinkFactory } from '@projectstorm/react-diagrams';\n\nexport class MetaLinkFactory extends DefaultLinkFactory {\n  componentsMap: Map<string, JSX.Element>;\n\n  constructor(componentsMap: Map<string, JSX.Element>) {\n    super(ReactDiagramMetaTypes.META_LINK);\n    this.componentsMap = componentsMap;\n  }\n\n  generateModel() {\n    return new MetaLinkModel();\n  }\n\n  generateLinkSegment(\n    model: MetaLinkModel,\n    selected: boolean,\n    path: string\n  ): JSX.Element {\n    // @ts-ignore\n    if (this.componentsMap.has(model.getOptions()?.shape)) {\n      const ReactComponentType = this.componentsMap.get(\n        // @ts-ignore\n        model.getOptions().shape\n      );\n\n      return (\n        // @ts-ignore\n        <ReactComponentType\n          key={`link-factory-${model.getOptions().id}`}\n          engine={this.engine}\n          model={model}\n          path={path}\n          selected={selected}\n        />\n      );\n    }\n    // TODO: Generate default link instead\n    return <UnknownTypeWidget />;\n  }\n}\n","const vars = {\n  fontFamily: 'Inter, sans-serif',\n  primaryBg: '#f1f1f1',\n  textWhite: '#FFFFFF',\n  chipTextColor: '#F2F2F7',\n  chipBgColor: 'rgba(60, 60, 67, 0.4)',\n\n  chipPrimaryTextColor: 'rgba(255, 255, 255, 0.8)',\n  chipPrimaryBgColor: 'rgba(0, 122, 255, 0.6)',\n\n  breadcrumbLinkColor: '#A2A2A2',\n  breadcrumbTextColor: '#292929',\n\n  buttonPrimaryBgColor: '4353FF',\n  buttonPrimaryBgHoverColor: '#3443E1',\n  buttonPrimaryDisabledBgColor: 'rgba(0, 122, 255, 0.4)',\n\n  listItemActiveBg: '#007AFF',\n  listSelectedTextColor: '#3C3C43',\n  listBoxShadow:\n    '0 0.1875rem 0.5rem rgba(0, 0, 0, 0.12), 0 0.1875rem 0.0625rem rgba(0, 0, 0, 0.04)',\n  listBorderColor: 'rgba(0, 0, 0, 0.04)',\n\n  dividerColor: 'rgba(118, 120, 125, 0.12)',\n\n  dropdownBg: 'rgba(246, 246, 248, 0.8)',\n  dropdownTextColor: 'rgba(60, 60, 67, 0.6)',\n\n  overlayColor: 'rgba(0, 0, 0, 0.4)',\n\n  progressBg: '#E5E5E5',\n  progressBar: '#017AFF',\n  progressShadow: 'inset 0 0 0.0625rem #E3E3E3',\n\n  switchShadow:\n    '0 0.1875rem 0.5rem rgba(0, 0, 0, 0.15), 0 0.1875rem 0.0625rem rgba(0, 0, 0, 0.06)',\n};\n\nexport default vars;\n","import React from 'react';\nimport { Box } from '@mui/system';\nimport { makeStyles } from '@mui/styles';\nimport vars from './assets/styles/variables';\nimport { Divider, List, ListItemButton, ListItemIcon } from '@mui/material';\nimport Move from './assets/svg/move.svg';\nimport Icon from './assets/svg/icon.svg';\nimport Node from './assets/svg/node.svg';\nimport Cursor from './assets/svg/cursor.svg';\nimport Fullscreen from './assets/svg/fullscreen.svg';\n\nconst { textWhite, dividerColor } = vars;\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    zIndex: '5',\n    width: '4rem',\n    background: textWhite,\n    boxShadow:\n      '0 0 3.75rem rgba(0, 0, 0, 0.1), 0 0.5rem 2.5rem -0.625rem rgba(0, 0, 0, 0.1)',\n    borderRadius: '2rem',\n    position: 'fixed',\n    left: '1rem',\n    top: '50%',\n    transform: 'translateY(-50%)',\n\n    '&.right': {\n      left: 'auto',\n      right: '1rem',\n    },\n\n    '& .MuiList-root': {\n      padding: '0.75rem',\n    },\n  },\n\n  node: {\n    margin: '0.25rem 0',\n    '& .MuiDivider-root': {\n      borderColor: dividerColor,\n      width: 'calc(100% - 1.5rem)',\n      margin: '0 auto',\n      border: 'none',\n      borderTop: '0.0625rem solid',\n    },\n\n    '& img': {\n      display: 'block',\n      margin: '1rem 0',\n    },\n  },\n}));\n\nconst Sidebar = () => {\n  const classes = useStyles();\n  return (\n    <Box className={`${classes.root} left`}>\n      <List disablePadding component=\"nav\">\n        <ListItemButton selected>\n          <ListItemIcon>\n            <img\n              src={`data:image/svg+xml;base64,${new Buffer(Cursor).toString(\n                'base64'\n              )}`}\n              alt=\"icon\"\n            />\n          </ListItemIcon>\n        </ListItemButton>\n\n        <ListItemButton>\n          <ListItemIcon>\n            <img\n              src={`data:image/svg+xml;base64,${new Buffer(Move).toString(\n                'base64'\n              )}`}\n              alt=\"move\"\n            />\n          </ListItemIcon>\n        </ListItemButton>\n      </List>\n\n      <Box className={classes.node}>\n        <Divider />\n        <img\n          src={`data:image/svg+xml;base64,${new Buffer(Node).toString(\n            'base64'\n          )}`}\n          alt=\"node\"\n        />\n        <Divider />\n      </Box>\n\n      <List disablePadding component=\"nav\">\n        <ListItemButton disabled>\n          <ListItemIcon>\n            <img\n              src={`data:image/svg+xml;base64,${new Buffer(Icon).toString(\n                'base64'\n              )}`}\n              alt=\"icon\"\n            />\n          </ListItemIcon>\n        </ListItemButton>\n\n        <ListItemButton>\n          <ListItemIcon>\n            <img\n              src={`data:image/svg+xml;base64,${new Buffer(Fullscreen).toString(\n                'base64'\n              )}`}\n              alt=\"fullscreen\"\n            />\n          </ListItemIcon>\n        </ListItemButton>\n      </List>\n    </Box>\n  );\n};\n\nexport default Sidebar;\n","export class UnknownParent extends Error {\n    constructor(msg: string) {\n        super(msg);\n        Object.setPrototypeOf(this, UnknownParent.prototype);\n    }\n}","import {MetaNodeModel} from \"../react-diagrams/MetaNodeModel\";\nimport { UnknownParent } from \"./Exceptions\";\n\nclass Graph {\n    private readonly root: MetaNodeModel;\n    private readonly children: Map<string, Graph>;\n\n    constructor(metaNodeModel: MetaNodeModel) {\n        this.root = metaNodeModel;\n        this.children = new Map<string, Graph>()\n    }\n\n    getID() : string{\n        return this.root.getID()\n    }\n\n    getRoot() : MetaNodeModel{\n        return this.root\n    }\n\n    getChild(id:string) {\n        return this.children.get(id)\n    }\n\n    addChild(graph: Graph) : void {\n        this.children.set(graph.getID(), graph)\n    }\n\n    getChildren(): MetaNodeModel[] {\n        return Array.from(this.children.values()).map(g => g.getRoot())\n    }\n\n    getDescendancy(): MetaNodeModel[] {\n        const descendancy = this.getChildren()\n        for(const graph of Array.from(this.children.values())){\n            descendancy.push(...graph.getDescendancy())\n        }\n        return descendancy\n    }\n\n    dfs(id: string): MetaNodeModel | boolean {\n        if(this.getID() == id){\n            return this.root\n        }\n        for (let root of Array.from(this.children.values())) {\n            const found = root.dfs(id)\n            if(found){\n                return found\n            }\n        }\n        return false\n    }\n\n}\n\n\nexport class MetaGraph {\n    private readonly roots: Map<string, Graph>;\n\n    constructor() {\n        this.roots = new Map<string, Graph>()\n    }\n\n    // @ts-ignore\n    addNode(metaNodeModel:MetaNodeModel): void {\n        const path = metaNodeModel.getGraphPath()\n        if(path.length == 1){\n            this.roots.set(metaNodeModel.getID(), new Graph(metaNodeModel))\n        }else{\n            path.pop() // Removes own id from path\n            const parentGraph = this.findGraph(path)\n            parentGraph.addChild(new Graph(metaNodeModel))\n        }\n    }\n\n\n    getNodes() : MetaNodeModel[] {\n        const nodes = []\n        for(const graph of Array.from(this.roots.values())){\n            nodes.push(graph.getRoot())\n            nodes.push(...graph.getDescendancy())\n        }\n        return nodes\n    }\n    // @ts-ignore\n    private findGraph(path: string[]) : Graph {\n        const rootId = path.shift()\n        // @ts-ignore\n        const root = this.roots.get(rootId)\n        if (root == undefined){\n            throw new UnknownParent(`Root with id ${rootId} not found`)\n        }\n        let parent = root\n        while(path.length > 0){\n            const next = path.shift()\n            // @ts-ignore\n            parent = parent.getChild(next)\n            if (parent == undefined){\n                throw new UnknownParent(`Node with id ${next} not found`)\n            }\n        }\n        return parent\n    }\n\n    // @ts-ignore\n    getChildren(parent : MetaNodeModel): MetaNodeModel[] {\n        const path = parent.getGraphPath()\n        if (path.length == 1) {\n            const root = this.roots.get(parent.getID())\n            if (root == undefined) {\n                throw new UnknownParent(`Root with id ${parent.getID()} not found`)\n            } else {\n                return root.getChildren()\n            }\n        } else {\n            const graph = this.findGraph(path)\n            return graph.getChildren()\n        }\n    }\n\n    // @ts-ignore\n    getParent(node : MetaNodeModel): MetaNodeModel | undefined {\n        const path = node.getGraphPath()\n        if (path.length == 1) {\n           return undefined\n        } else {\n            path.pop() // removes own id from path\n            const parentGraph = this.findGraph(path)\n            return parentGraph.getRoot()\n        }\n    }\n\n    getNodeDFS(nodeId: string): MetaNodeModel | undefined {\n        for (let root of Array.from(this.roots.values())) {\n            const found = root.dfs(nodeId)\n            if(found){\n                // @ts-ignore\n                return found\n            }\n        }\n        return undefined\n    }\n}\n\n","import * as React from 'react';\nimport { MetaNode } from './models/MetaNode';\nimport { MetaLink } from './models/MetaLink';\nimport { ComponentsMap } from './models/ComponentsMap';\nimport createEngine, { DiagramModel } from '@projectstorm/react-diagrams';\nimport { MetaNodeFactory } from './react-diagrams/MetaNodeFactory';\nimport { MetaLinkFactory } from './react-diagrams/MetaLinkFactory';\nimport { CanvasWidget } from '@projectstorm/react-canvas-core';\nimport { MetaNodeModel } from './react-diagrams/MetaNodeModel';\nimport { getLinkModel } from './helpers/linksHelper';\nimport { makeStyles } from '@mui/styles';\nimport Sidebar from './components/Sidebar';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport theme from './theme';\nimport { Box } from '@mui/material';\nimport {generateMetaGraph, registerPositionListener} from \"./helpers/nodesHelper\";\nimport {\n  updateChildrenPosition,\n  updateNodeLocalPosition,\n  updateNodesContainerBoundingBoxes\n} from \"./helpers/engineHelper\";\nimport {useEffect} from \"react\";\n\nconst useStyles = makeStyles(_ => ({\n  container: {\n    height: '100%',\n    width: '100%',\n  },\n  canvasContainer: {\n    height: '100%',\n    width: '100%',\n    background: '#fffff',\n  },\n}));\n\ninterface MetaDiagramProps {\n  metaNodes: MetaNode[];\n  metaLinks: MetaLink[];\n  componentsMap: ComponentsMap;\n  wrapperClassName?: string;\n  canvasClassName?: string;\n  metaTheme: {\n    customThemeVariables: {};\n    canvasClassName: string;\n  };\n}\n\nconst MetaDiagram = ({\n  metaNodes,\n  metaLinks,\n  componentsMap,\n  wrapperClassName,\n  metaTheme,\n}: MetaDiagramProps) => {\n  const classes = useStyles();\n\n  // set up the diagram engine\n  const engine = createEngine();\n\n  engine\n    .getNodeFactories()\n    // @ts-ignore\n    .registerFactory(new MetaNodeFactory(componentsMap.nodes));\n\n  engine\n    .getLinkFactories()\n    // @ts-ignore\n    .registerFactory(new MetaLinkFactory(componentsMap.links));\n\n  const metaGraph = generateMetaGraph(metaNodes)\n\n  const repaintCanvas = (event: any) => {\n    const node = event.entity\n    // @ts-ignore\n    updateChildrenPosition(metaGraph, node)\n    // @ts-ignore\n    updateNodeLocalPosition(metaGraph, node)\n    engine.repaintCanvas();\n  }\n\n\n  // set up the diagram model\n\n  const model = new DiagramModel();\n\n  const nodes = metaGraph.getNodes()\n  registerPositionListener(nodes, repaintCanvas)\n\n  const links = metaLinks\n    .map(ml => getLinkModel(ml, metaGraph))\n    .filter(mlm => mlm !== undefined);\n  // @ts-ignore\n  model.addAll(...nodes, ...links);\n\n  // load model into engine\n  engine.setModel(model);\n\n  useEffect(() => {\n    // @ts-ignore\n    updateNodesContainerBoundingBoxes(model.getNodes())\n    // @ts-ignore\n    model.registerListener({nodesUpdated: (event => updateNodesContainerBoundingBoxes([event.node]))})\n  }, [])\n\n\n  const containerClassName = wrapperClassName\n    ? wrapperClassName\n    : classes.container;\n\n  return (\n    <ThemeProvider theme={createTheme(theme(metaTheme?.customThemeVariables))}>\n      <CssBaseline />\n      <Box className={containerClassName}>\n        <Sidebar />\n        <CanvasWidget\n          className={`${classes.canvasContainer} ${metaTheme?.canvasClassName}`}\n          engine={engine}\n        />\n      </Box>\n    </ThemeProvider>\n  );\n};\n\nexport default MetaDiagram;\nexport { MetaNode, MetaLink, MetaNodeModel, ComponentsMap };\nexport { MetaLinkModel } from './react-diagrams/MetaLinkModel';\nexport { Position } from './models/Position';\n","import React from 'react';\n\nexport class ComponentsMap {\n  nodes: Map<string, React.ComponentType>;\n  links: Map<string, React.ComponentType>;\n\n  constructor(\n    nodesMap: Map<string, React.ComponentType>,\n    linksMap: Map<string, React.ComponentType>\n  ) {\n    this.nodes = nodesMap;\n    this.links = linksMap;\n  }\n}\n","import { ILink } from './ILink';\nimport {MetaLinkModel} from \"../react-diagrams/MetaLinkModel\";\n\nexport class MetaLink implements ILink {\n  sourceId: string;\n  sourcePortId: string;\n  targetId: string;\n  targetPortId: string;\n  options: Map<string, any>;\n\n  constructor(\n    id: string,\n    name: string,\n    shape: string,\n    sourceId: string,\n    sourcePortId: string,\n    targetId: string,\n    targetPortId: string,\n    options: Map<string, any>\n  ) {\n    this.sourceId = sourceId;\n    this.sourcePortId = sourcePortId;\n    this.targetId = targetId;\n    this.targetPortId = targetPortId;\n    this.options = options;\n    this.options.set('id', id);\n    this.options.set('name', name);\n    this.options.set('shape', shape);\n  }\n\n  getSourceId(): string {\n    return this.sourceId;\n  }\n\n  getSourcePortId(): string {\n    return this.sourcePortId;\n  }\n\n  getTargetId(): string {\n    return this.targetId;\n  }\n\n  getTargetPortId(): string {\n    return this.targetPortId;\n  }\n\n  toModel(): MetaLinkModel {\n    return new MetaLinkModel(Object.fromEntries(this.options))\n  }\n}\n","import { Position } from './Position';\nimport {MetaNodeModel} from \"../react-diagrams/MetaNodeModel\";\n\nexport class MetaNode {\n  private readonly parent: MetaNode | undefined;\n  private readonly position: Position;\n  private readonly options: Map<string, any>;\n\n  constructor(\n    id: string,\n    name: string,\n    shape: string,\n    position: Position,\n    parent: MetaNode | undefined,\n    options: Map<string, any>\n  ) {\n    this.parent = parent\n    this.position = position\n    this.options = new Map(options)\n    this.options.set('id', id);\n    this.options.set('name', name);\n    this.options.set('shape', shape);\n  }\n\n  private getId() : string{\n    return this.options.get('id')\n  }\n\n  private getGraphPath() : string[] {\n    if(this.parent){\n      const graphPath = this.parent.getGraphPath()\n      graphPath.push(<string>this.getId())\n      return graphPath\n    }\n    return [this.getId()]\n  }\n\n  private getWorldPosition() : Position {\n    return this.parent ? this.position.add(this.parent?.getWorldPosition()) : this.position\n  }\n\n  getDepth() : number {\n    return this.parent ? this.parent.getDepth()+1 : 0\n  }\n\n  toModel() : MetaNodeModel {\n    const optionsMap = new Map(this.options)\n    optionsMap.set('graphPath', this.getGraphPath())\n    optionsMap.set('localPosition', this.position)\n    optionsMap.set('depth', this.getDepth())\n    const metaNodeModel =  new MetaNodeModel(Object.fromEntries(optionsMap))\n    const worldPosition = this.getWorldPosition()\n    metaNodeModel.setPosition(worldPosition.x, worldPosition.y)\n    return metaNodeModel\n  }\n\n}\n","import {MetaNode} from \"../models/MetaNode\";\nimport {BaseEntityEvent} from \"@projectstorm/react-canvas-core\";\nimport {NodeModel, NodeModelGenerics} from \"@projectstorm/react-diagrams\";\nimport {MetaGraph} from \"../models/MetaGraph\";\nimport {MetaNodeModel} from \"../react-diagrams/MetaNodeModel\";\n\n\nexport function generateMetaGraph(metaNodes: MetaNode[]) : MetaGraph {\n  const metaGraph = new MetaGraph()\n  metaNodes.sort(function(a, b) {\n    return a.getDepth() - b.getDepth();\n  });\n\n  for(const mn of metaNodes){\n\n    const metaNodeModel = mn.toModel()\n\n    metaGraph.addNode(metaNodeModel)\n  }\n  return metaGraph\n}\n\nexport function registerPositionListener(metaNodeModels: MetaNodeModel[], callback: { (event: any): void; (arg0: BaseEntityEvent<NodeModel<NodeModelGenerics>>): void; }){\n  // @ts-ignore\n  metaNodeModels.forEach(metaNodeModel => metaNodeModel.registerListener({positionChanged: (event => callback(event))}))\n}\n\n","import {MetaNodeModel} from \"../react-diagrams/MetaNodeModel\";\nimport {MetaGraph} from \"../models/MetaGraph\";\n\nexport function updateChildrenPosition(metaGraph: MetaGraph, parent: MetaNodeModel): void {\n\n    const children = metaGraph.getChildren(parent);\n    // // @ts-ignore\n    children.forEach(n => {\n        /*\n            No need to explicitly call updateChildrenPosition for n children because it will happen automatically in\n            the event listener\n         */\n        // @ts-ignore\n        n.setPosition(parent.getX() + n.options['localPosition'].x, parent.getY() + n.options['localPosition'].y)\n\n    })\n}\n\nexport function updateNodeLocalPosition(metaGraph: MetaGraph, node: MetaNodeModel): void {\n    /*\n        Updates relative position from the node that moved to its parent\n    */\n    node.updateLocalPosition(metaGraph)\n    // TODO: check if it is still inside the parent or if it started to be inside a node\n}\n\n// @ts-ignore\nexport function updateNodesContainerBoundingBoxes(nodes: MetaNodeModel[]): void {\n    // nodes.forEach(n => n.updateContainerBoundingBox(nodes))\n}","import { MetaLink } from '../models/MetaLink';\nimport { MetaLinkModel } from '../react-diagrams/MetaLinkModel';\nimport {MetaGraph} from \"../models/MetaGraph\";\n\nexport function getLinkModel(\n  metaLink: MetaLink,\n  metaGraph: MetaGraph\n): MetaLinkModel | undefined {\n  const link = metaLink.toModel();\n  const source = metaGraph.getNodeDFS(metaLink.getSourceId());\n  const target = metaGraph.getNodeDFS(metaLink.getTargetId());\n  if (source && target) {\n    link.setSourcePort(source.getPort(metaLink.getSourcePortId()));\n    link.setTargetPort(target.getPort(metaLink.getTargetPortId()));\n    return link;\n  }\n  return undefined;\n}\n","import vars from './components/assets/styles/variables';\n\ntype ThemeVars = {\n  [key: string]: any;\n};\n\nconst applicationTheme = (params: ThemeVars) => {\n  const {\n    primaryBg,\n    fontFamily,\n    chipTextColor,\n    chipBgColor,\n    textWhite,\n    listItemActiveBg,\n    listSelectedTextColor,\n    listBoxShadow,\n    listBorderColor,\n  } = params;\n  return {\n    components: {\n      MuiCssBaseline: {\n        styleOverrides: `\n          html {\n            background: ${primaryBg};\n            font-family: ${fontFamily};\n          }\n          body {\n            background-color:${primaryBg};\n            font-family: ${fontFamily};\n            font-size: 1rem;\n          }\n        `,\n      },\n      MuiList: {\n        styleOverrides: {\n          root: {\n            '&.customSwitch': {\n              padding: '0.125rem',\n              background: chipTextColor,\n              borderRadius: '0.5rem',\n              display: 'flex',\n              '& .MuiListItemButton-root': {\n                padding: '0.25rem 0.75rem',\n                borderRadius: '0.4375rem',\n                width: '10.59375rem',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                '&:not(:last-child)': {\n                  marginBottom: '0',\n                },\n                '&.Mui-disabled': {\n                  opacity: 1,\n                },\n                '&.Mui-selected': {\n                  background: textWhite,\n                  boxShadow: listBoxShadow,\n                  border: `0.03125rem solid ${listBorderColor}`,\n                  '& .MuiTypography-root': {\n                    color: listSelectedTextColor,\n                  },\n                },\n              },\n              '& .MuiChip-root': {\n                marginLeft: '0.25rem',\n              },\n              '& .MuiTypography-root': {\n                fontWeight: 500,\n                fontSize: '0.8125rem',\n                lineHeight: '1.25rem',\n                letterSpacing: '-0.005rem',\n                color: chipBgColor,\n                margin: 0,\n              },\n            },\n          },\n        },\n      },\n      MuiListItemIcon: {\n        styleOverrides: {\n          root: {\n            minWidth: 'inherit',\n          },\n        },\n      },\n      MuiListItemButton: {\n        styleOverrides: {\n          root: {\n            padding: 0,\n            width: '2.5rem',\n            height: '2.5rem',\n            borderRadius: '50%',\n            justifyContent: 'center',\n            backgroundColor: chipTextColor,\n            '&:hover': {\n              backgroundColor: chipTextColor,\n            },\n            '&:not(:last-child)': {\n              marginBottom: '0.75rem',\n            },\n            '&.Mui-selected': {\n              backgroundColor: listItemActiveBg,\n              '&:hover': {\n                backgroundColor: listItemActiveBg,\n              },\n            },\n            '&.Mui-disabled': {\n              opacity: 0.8,\n            },\n          },\n        },\n      },\n    },\n  };\n};\n\nexport default (customVariables: ThemeVars) =>\n  applicationTheme({\n    ...vars,\n    ...customVariables,\n  });\n"],"names":["ReactDiagramMetaTypes","Position","constructor","x","y","this","add","otherPosition","sub","MetaNodeModel","NodeModel","options","super","type","META_NODE","addPort","DefaultPortModel","in","name","getGraphPath","getOptions","calculateLocalPosition","metaGraph","worldPosition","getX","getY","parent","getParent","parentWorldPosition","getContainerBoundingBox","nodes","updateLocalPosition","updateContainerBoundingBox","MetaLinkModel","DefaultLinkModel","META_LINK","UnknownTypeWidget","React","MetaNodeFactory","AbstractReactFactory","componentsMap","generateModel","generateReactWidget","event","has","model","shape","ReactComponentType","get","key","id","engine","MetaLinkFactory","DefaultLinkFactory","generateLinkSegment","selected","path","_model$getOptions","vars","fontFamily","primaryBg","textWhite","chipTextColor","chipBgColor","chipPrimaryTextColor","chipPrimaryBgColor","breadcrumbLinkColor","breadcrumbTextColor","buttonPrimaryBgColor","buttonPrimaryBgHoverColor","buttonPrimaryDisabledBgColor","listItemActiveBg","listSelectedTextColor","listBoxShadow","listBorderColor","dividerColor","dropdownBg","dropdownTextColor","overlayColor","progressBg","progressBar","progressShadow","switchShadow","useStyles","makeStyles","root","zIndex","width","background","boxShadow","borderRadius","position","left","top","transform","&.right","right","& .MuiList-root","padding","node","margin","& .MuiDivider-root","borderColor","border","borderTop","& img","display","Sidebar","classes","Box","className","List","disablePadding","component","ListItemButton","ListItemIcon","src","Buffer","toString","alt","Divider","disabled","UnknownParent","Error","msg","Object","setPrototypeOf","prototype","Graph","metaNodeModel","children","Map","getID","getRoot","getChild","addChild","graph","set","getChildren","Array","from","values","map","g","getDescendancy","descendancy","push","dfs","found","MetaGraph","roots","addNode","length","pop","findGraph","getNodes","rootId","shift","undefined","next","getNodeDFS","nodeId","_","container","height","canvasContainer","nodesMap","linksMap","links","sourceId","sourcePortId","targetId","targetPortId","getSourceId","getSourcePortId","getTargetId","getTargetPortId","toModel","fromEntries","getId","graphPath","getWorldPosition","_this$parent","getDepth","optionsMap","setPosition","metaNodes","metaLinks","wrapperClassName","metaTheme","createEngine","getNodeFactories","registerFactory","getLinkFactories","sort","a","b","mn","generateMetaGraph","DiagramModel","callback","entity","forEach","n","updateChildrenPosition","updateNodeLocalPosition","repaintCanvas","registerListener","positionChanged","ml","metaLink","link","source","target","setSourcePort","getPort","setTargetPort","getLinkModel","filter","mlm","addAll","setModel","useEffect","nodesUpdated","containerClassName","ThemeProvider","theme","createTheme","customVariables","customThemeVariables","params","components","MuiCssBaseline","styleOverrides","MuiList","&.customSwitch","& .MuiListItemButton-root","alignItems","justifyContent","&:not(:last-child)","marginBottom","&.Mui-disabled","opacity","&.Mui-selected","& .MuiTypography-root","color","& .MuiChip-root","marginLeft","fontWeight","fontSize","lineHeight","letterSpacing","MuiListItemIcon","minWidth","MuiListItemButton","backgroundColor","&:hover","applicationTheme","CssBaseline","CanvasWidget","canvasClassName"],"mappings":"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"}