{"version":3,"file":"meta-diagram.cjs.development.js","sources":["../src/models/MetaOptions.ts","../src/models/MetaNode.ts","../src/models/MetaLink.ts","../src/models/ComponentsMap.ts","../src/constants.ts","../src/react-diagrams/MetaNodeModel.ts","../src/components/UnknownTypeWidget.tsx","../src/react-diagrams/MetaNodeFactory.tsx","../src/react-diagrams/MetaLinkModel.ts","../src/react-diagrams/MetaLinkFactory.tsx","../src/helpers/nodesHelper.ts","../src/helpers/linksHelper.ts","../src/components/assets/styles/variables.ts","../src/components/Sidebar.tsx","../src/theme.ts","../src/models/Position.ts","../src/index.tsx"],"sourcesContent":["import { IShape } from './IShape';\nimport { IId } from './IId';\n\nexport class MetaOptions implements IShape, IId {\n  options: Map<string, any>;\n\n  constructor(\n    id: string,\n    name: string,\n    shape: string,\n    options: Map<string, any>\n  ) {\n    this.options = options;\n    this.options.set('id', id);\n    this.options.set('name', name);\n    this.options.set('shape', shape);\n  }\n\n  getId(): string {\n    return this.options.get('id');\n  }\n\n  getShape(): string {\n    return this.options.get('shape');\n  }\n}\n","import { MetaOptions } from './MetaOptions';\nimport { Position } from './Position';\n\nexport class MetaNode {\n  children: MetaNode[];\n  options: MetaOptions;\n\n  constructor(\n    id: string,\n    name: string,\n    shape: string,\n    position: Position,\n    options: Map<string, any>\n  ) {\n    this.children = [];\n    options.set('position', position);\n    this.options = new MetaOptions(id, name, shape, options);\n  }\n}\n","import { MetaOptions } from './MetaOptions';\nimport { ILink } from './ILink';\n\nexport class MetaLink implements ILink {\n  sourceId: string;\n  sourcePortId: string;\n  targetId: string;\n  targetPortId: string;\n  options: MetaOptions;\n\n  constructor(\n    id: string,\n    name: string,\n    shape: string,\n    sourceId: string,\n    sourcePortId: string,\n    targetId: string,\n    targetPortId: string,\n    options: Map<string, any>\n  ) {\n    this.sourceId = sourceId;\n    this.sourcePortId = sourcePortId;\n    this.targetId = targetId;\n    this.targetPortId = targetPortId;\n    this.options = new MetaOptions(id, name, shape, options);\n  }\n\n  getSourceId(): string {\n    return this.sourceId;\n  }\n\n  getSourcePortId(): string {\n    return this.sourcePortId;\n  }\n\n  getTargetId(): string {\n    return this.targetId;\n  }\n\n  getTargetPortId(): string {\n    return this.targetPortId;\n  }\n}\n","import React from 'react';\n\nexport class ComponentsMap {\n  nodes: Map<string, React.ComponentType>;\n  links: Map<string, React.ComponentType>;\n\n  constructor(\n    nodesMap: Map<string, React.ComponentType>,\n    linksMap: Map<string, React.ComponentType>\n  ) {\n    this.nodes = nodesMap;\n    this.links = linksMap;\n  }\n}\n","export enum ReactDiagramMetaTypes {\n  META_NODE = 'meta-node-type',\n  META_LINK = 'meta-link-type',\n}\n","import { DefaultPortModel, NodeModel } from '@projectstorm/react-diagrams';\nimport { ReactDiagramMetaTypes } from '../constants';\n\nexport class MetaNodeModel extends NodeModel {\n  constructor(options = {}) {\n    super({\n      ...options,\n      type: ReactDiagramMetaTypes.META_NODE,\n    });\n\n    // set up an in and out port\n\n    this.addPort(\n      new DefaultPortModel({\n        in: true,\n        name: 'in',\n      })\n    );\n    this.addPort(\n      new DefaultPortModel({\n        in: false,\n        name: 'out',\n      })\n    );\n  }\n}\n","import React from 'react';\n\nexport const UnknownTypeWidget = () => {\n  return <div>Unknown Type</div>;\n};\n","import { AbstractReactFactory } from '@projectstorm/react-canvas-core';\nimport { MetaNodeModel } from './MetaNodeModel';\nimport { UnknownTypeWidget } from '../components/UnknownTypeWidget';\nimport React from 'react';\nimport { ReactDiagramMetaTypes } from '../constants';\n\nexport class MetaNodeFactory extends AbstractReactFactory {\n  componentsMap: Map<string, React.ComponentType>;\n\n  constructor(componentsMap: Map<string, React.ComponentType>) {\n    super(ReactDiagramMetaTypes.META_NODE);\n    this.componentsMap = componentsMap;\n  }\n\n  generateModel() {\n    return new MetaNodeModel();\n  }\n\n  generateReactWidget(event: any): JSX.Element {\n    if (this.componentsMap.has(event.model.options.shape)) {\n      const ReactComponentType = this.componentsMap.get(\n        event.model.options.shape\n      );\n      // @ts-ignore\n      return <ReactComponentType engine={this.engine} model={event.model} />;\n    }\n    // TODO: Generate default node instead\n    return <UnknownTypeWidget />;\n  }\n}\n","import { DefaultLinkModel } from '@projectstorm/react-diagrams';\nimport { ReactDiagramMetaTypes } from '../constants';\n\nexport class MetaLinkModel extends DefaultLinkModel {\n  constructor(options = {}) {\n    super({\n      ...options,\n      type: ReactDiagramMetaTypes.META_LINK,\n    });\n  }\n}\n","import { MetaLinkModel } from './MetaLinkModel';\nimport { UnknownTypeWidget } from '../components/UnknownTypeWidget';\nimport { ReactDiagramMetaTypes } from '../constants';\nimport React from 'react';\nimport { DefaultLinkFactory } from '@projectstorm/react-diagrams';\n\nexport class MetaLinkFactory extends DefaultLinkFactory {\n  componentsMap: Map<string, JSX.Element>;\n\n  constructor(componentsMap: Map<string, JSX.Element>) {\n    super(ReactDiagramMetaTypes.META_LINK);\n    this.componentsMap = componentsMap;\n  }\n\n  generateModel() {\n    return new MetaLinkModel();\n  }\n\n  generateLinkSegment(\n    model: MetaLinkModel,\n    selected: boolean,\n    path: string\n  ): JSX.Element {\n    // @ts-ignore\n    if (this.componentsMap.has(model.getOptions()?.shape)) {\n      const ReactComponentType = this.componentsMap.get(\n        // @ts-ignore\n        model.getOptions().shape\n      );\n\n      return (\n        // @ts-ignore\n        <ReactComponentType\n          engine={this.engine}\n          model={model}\n          path={path}\n          selected={selected}\n        />\n      );\n    }\n    // TODO: Generate default link instead\n    return <UnknownTypeWidget />;\n  }\n}\n","import { MetaNodeModel } from '../react-diagrams/MetaNodeModel';\n\nexport function getNode(\n  id: string,\n  nodes: MetaNodeModel[]\n): MetaNodeModel | undefined {\n  return nodes.find(n => n.getOptions().id === id);\n}\n","import { MetaLink } from '../models/MetaLink';\nimport { MetaLinkModel } from '../react-diagrams/MetaLinkModel';\nimport { MetaNodeModel } from '../react-diagrams/MetaNodeModel';\nimport { getNode } from './nodesHelper';\n\nexport function getLinkModel(\n  metaLink: MetaLink,\n  nodes: MetaNodeModel[]\n): MetaLinkModel | undefined {\n  const link = new MetaLinkModel(Object.fromEntries(metaLink.options.options));\n  const source = getNode(metaLink.getSourceId(), nodes);\n  const target = getNode(metaLink.getTargetId(), nodes);\n  if (source && target) {\n    link.setSourcePort(source.getPort(metaLink.getSourcePortId()));\n    link.setTargetPort(target.getPort(metaLink.getTargetPortId()));\n    return link;\n  }\n  return undefined;\n}\n","const nodeGreen = {\n  nodeGreenBackgroundColor: '#D4F4D4',\n  nodeGreenTextColor: '#669D66',\n  nodeGreenBorderColor: 'rgba(102, 157, 102, 0.2)',\n  nodeGreenBoxShadow: '0 0.25rem 0.625rem -0.25rem rgba(102, 157, 102, 0.3)',\n};\n\nconst vars = {\n  fontFamily: 'Inter, sans-serif',\n  primaryBg: '#f1f1f1',\n  textWhite: '#FFFFFF',\n  chipTextColor: '#F2F2F7',\n  chipBgColor: 'rgba(60, 60, 67, 0.4)',\n\n  chipPrimaryTextColor: 'rgba(255, 255, 255, 0.8)',\n  chipPrimaryBgColor: 'rgba(0, 122, 255, 0.6)',\n\n  breadcrumbLinkColor: '#A2A2A2',\n  breadcrumbTextColor: '#292929',\n\n  buttonPrimaryBgColor: '4353FF',\n  buttonPrimaryBgHoverColor: '#3443E1',\n  buttonPrimaryDisabledBgColor: 'rgba(0, 122, 255, 0.4)',\n\n  listItemActiveBg: '#007AFF',\n  listSelectedTextColor: '#3C3C43',\n  listBoxShadow:\n    '0 0.1875rem 0.5rem rgba(0, 0, 0, 0.12), 0 0.1875rem 0.0625rem rgba(0, 0, 0, 0.04)',\n  listBorderColor: 'rgba(0, 0, 0, 0.04)',\n\n  dividerColor: 'rgba(118, 120, 125, 0.12)',\n\n  dropdownBg: 'rgba(246, 246, 248, 0.8)',\n  dropdownTextColor: 'rgba(60, 60, 67, 0.6)',\n\n  overlayColor: 'rgba(0, 0, 0, 0.4)',\n\n  progressBg: '#E5E5E5',\n  progressBar: '#017AFF',\n  progressShadow: 'inset 0 0 0.0625rem #E3E3E3',\n\n  switchShadow:\n    '0 0.1875rem 0.5rem rgba(0, 0, 0, 0.15), 0 0.1875rem 0.0625rem rgba(0, 0, 0, 0.06)',\n\n  sidebarBg: '#ffffff',\n  sidebarShadow: `0 0 3.75rem rgba(0, 0, 0, 0.1),\n  0 0.5rem 2.5rem -0.625rem rgba(0, 0, 0, 0.1)`,\n  canvasBg: '#fff',\n  showPropertiesButtonBg: '#161A1E',\n  nodeBorderColor: '#18A0FB',\n  nodePointerBg: '#fff',\n  nodeButtonTextColor: 'rgba(255, 255, 255, 0.8)',\n  nodeButtonLineColor: 'rgba(255, 255, 255, 0.2)',\n  nodeTextColor: '#3C3C43',\n  ...nodeGreen,\n};\n\nexport default vars;\n","import React from 'react';\nimport { Box } from '@mui/system';\nimport { makeStyles } from '@mui/styles';\nimport vars from './assets/styles/variables';\nimport { Divider, List, ListItemButton, ListItemIcon } from '@mui/material';\nimport Move from './assets/svg/move.svg';\nimport MoveActive from './assets/svg/move-active.svg';\nimport Icon from './assets/svg/icon.svg';\nimport IconActive from './assets/svg/icon-active.svg';\nimport Node from './assets/svg/node.svg';\nimport Cursor from './assets/svg/cursor.svg';\nimport CursorActive from './assets/svg/cursor-active.svg';\nimport Fullscreen from './assets/svg/fullscreen.svg';\nimport FullscreenActive from './assets/svg/fullscreen-active.svg';\n\nconst { dividerColor } = vars;\n\nconst useStyles = makeStyles(() => ({\n  node: {\n    margin: '0.25rem 0',\n    '& .MuiDivider-root': {\n      borderColor: dividerColor,\n      width: 'calc(100% - 1.5rem)',\n      margin: '0 auto',\n      border: 'none',\n      borderTop: '0.0625rem solid',\n    },\n\n    '& img': {\n      display: 'block',\n      margin: '1rem 0',\n    },\n  },\n}));\n\ntype sidebarItemProps = {\n  image: string;\n  name: string;\n  selectedImage: string;\n  selection: string;\n};\n\nconst Sidebar = () => {\n  const classes = useStyles();\n  const [selected, setSelected] = React.useState('1');\n  const svgImg = (img: string) =>\n    `data:image/svg+xml;base64,${new Buffer(img).toString('base64')}`;\n  const SidebarItem = (props: sidebarItemProps) => {\n    const { image, name, selectedImage, selection } = props;\n    return (\n      <ListItemButton\n        selected={selected === selection}\n        onClick={() => setSelected(selection)}\n      >\n        <ListItemIcon>\n          {selected === selection ? (\n            <img src={svgImg(image)} alt={name} />\n          ) : (\n            <img src={svgImg(selectedImage)} alt={name} />\n          )}\n        </ListItemIcon>\n      </ListItemButton>\n    );\n  };\n\n  return (\n    <Box className=\"sidebar\">\n      <List disablePadding component=\"nav\">\n        <SidebarItem\n          image={CursorActive}\n          selectedImage={Cursor}\n          name=\"cursor\"\n          selection=\"1\"\n        />\n        <SidebarItem\n          image={MoveActive}\n          selectedImage={Move}\n          name=\"move\"\n          selection=\"2\"\n        />\n      </List>\n\n      <Box className={classes.node}>\n        <Divider />\n        <img src={svgImg(Node)} alt=\"Node\" />\n        <Divider />\n      </Box>\n\n      <List disablePadding component=\"nav\">\n        <SidebarItem\n          image={IconActive}\n          selectedImage={Icon}\n          name=\"draw\"\n          selection=\"3\"\n        />\n        <SidebarItem\n          image={FullscreenActive}\n          selectedImage={Fullscreen}\n          name=\"fullscreen\"\n          selection=\"4\"\n        />\n      </List>\n    </Box>\n  );\n};\n\nexport default Sidebar;\n","import vars from './components/assets/styles/variables';\nimport MI from './components/assets/svg/mechanism-yellow.svg';\n\ntype ThemeVars = {\n  [key: string]: any;\n};\n\nconst applicationTheme = (params: ThemeVars) => {\n  const {\n    primaryBg,\n    fontFamily,\n    chipTextColor,\n    chipBgColor,\n    textWhite,\n    listItemActiveBg,\n    listSelectedTextColor,\n    listBoxShadow,\n    listBorderColor,\n    sidebarBg,\n    sidebarShadow,\n    canvasBg,\n    showPropertiesButtonBg,\n    nodeBorderColor,\n    nodePointerBg,\n    nodeButtonTextColor,\n    nodeButtonLineColor,\n    nodeGreenBackgroundColor,\n    nodeGreenTextColor,\n    nodeGreenBorderColor,\n    nodeGreenBoxShadow,\n    nodeTextColor,\n  } = params;\n  return {\n    components: {\n      MuiCssBaseline: {\n        styleOverrides: `\n          html {\n            background: ${primaryBg};\n            font-family: ${fontFamily};\n          }\n          body {\n            background-color:${primaryBg};\n            font-family: ${fontFamily};\n            font-size: 1rem;\n          }\n          .sidebar {\n            z-index: 5;\n            width: 4rem;\n            background: ${sidebarBg};\n            box-shadow: ${sidebarShadow};\n            border-radius: 2rem;\n            position: fixed;\n            left: 1rem;\n            top: 50%;\n            transform: translateY(-50%);\n          }\n\n          .sidebar.right {\n            left: auto;\n            right: 1rem;\n          }\n\n          .sidebar .MuiList-root {\n            padding: 0.75rem\n          }\n\n          .canvas-widget {\n            height: 100%;\n            width: 100%;\n            background-color: ${canvasBg};\n          }\n\n          .primary-node {\n            border: solid 0.0625rem ${nodeGreenBorderColor};\n            border-radius: 50%;\n            box-shadow: ${nodeGreenBoxShadow};\n            background: ${nodeGreenBackgroundColor};\n            position: relative;\n            width: 10rem;\n            height: 10rem;\n          }\n\n          .primary-node .primary-node_header {\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            height: 100%;\n            flex-direction: column;\n          }\n\n          .primary-node img {\n            margin-bottom: 0.25rem\n          }\n\n          .primary-node .primary-node_header p {\n            color: ${nodeGreenTextColor};\n          }\n\n          .primary-node .primary-node_header img {\n            background: \"url(data:image/svg+xml;base64,${new Buffer(\n              MI\n            ).toString('base64')})\";\n          }\n\n          .primary-node p {\n            font-weight: 500;\n            color: ${nodeTextColor};\n            font-size: 0.8125rem;\n            line-height: 1.25rem;\n            letter-spacing: -0.005rem;\n            margin: 0;\n          }\n\n          .node-button.MuiButton-root {\n            background-color: ${showPropertiesButtonBg};\n            border-radius: 1.125rem;\n            font-weight: 600;\n            font-size: 0.8125rem;\n            display: flex;\n            line-height: 1rem;\n            letter-spacing: -0.025625rem;\n            color: ${nodeButtonTextColor};\n            margin: 0 !important;\n            width: 9.625rem;\n            padding: 0;\n            height: 2.25rem;\n            position: absolute;\n            top: -2.625rem;\n            font-family: ${fontFamily};\n            text-transform: none;\n            left: 50%;\n            transform: translateX(-50%);\n          }\n\n          .node-button.MuiButton-root:hover {\n            background-color: ${showPropertiesButtonBg};\n          }\n\n          .node-button .icon {\n            width: 1rem;\n            border: solid 0.0625rem;\n            height: 1rem;\n            border-radius: 50%;\n            margin-right: 1.25rem;\n            position: relative;\n          }\n\n          .node-button .icon:after {\n            content: \"\";\n            height: 1.75rem;\n            width: 0.0625rem;\n            display: block;\n            position: absolute;\n            right: -0.625rem;\n            top: 50%;\n            transform: translateY(-50%);\n            background-color: ${nodeButtonLineColor};\n          }\n\n          .primary-node .node-button .icon {\n            background: ${nodeGreenBackgroundColor};\n            border-color: ${nodeGreenBorderColor}\n          }\n\n          .nodes {\n            width: 10rem;\n            height: 10rem;\n            border: 0.09375rem solid ${nodeBorderColor};\n            z-index: 99999;\n            position: absolute;\n          }\n\n          .node .pointer {\n            width: 0.625rem;\n            height: 0.625rem;\n            background: ${nodePointerBg};\n            border: 0.09375rem solid ${nodeBorderColor};\n            border-radius: 0.125rem;\n            position: absolute;\n          }\n\n        `,\n      },\n      MuiList: {\n        styleOverrides: {\n          root: {\n            '&.customSwitch': {\n              padding: '0.125rem',\n              background: chipTextColor,\n              borderRadius: '0.5rem',\n              display: 'flex',\n              '& .MuiListItemButton-root': {\n                padding: '0.25rem 0.75rem',\n                borderRadius: '0.4375rem',\n                width: '10.59375rem',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                '&:not(:last-child)': {\n                  marginBottom: '0',\n                },\n                '&.Mui-disabled': {\n                  opacity: 1,\n                },\n                '&.Mui-selected': {\n                  background: textWhite,\n                  boxShadow: listBoxShadow,\n                  border: `0.03125rem solid ${listBorderColor}`,\n                  '& .MuiTypography-root': {\n                    color: listSelectedTextColor,\n                  },\n                },\n              },\n              '& .MuiChip-root': {\n                marginLeft: '0.25rem',\n              },\n              '& .MuiTypography-root': {\n                fontWeight: 500,\n                fontSize: '0.8125rem',\n                lineHeight: '1.25rem',\n                letterSpacing: '-0.005rem',\n                color: chipBgColor,\n                margin: 0,\n              },\n            },\n          },\n        },\n      },\n      MuiListItemIcon: {\n        styleOverrides: {\n          root: {\n            minWidth: 'inherit',\n          },\n        },\n      },\n      MuiListItemButton: {\n        styleOverrides: {\n          root: {\n            padding: 0,\n            width: '2.5rem',\n            height: '2.5rem',\n            borderRadius: '50%',\n            justifyContent: 'center',\n            backgroundColor: chipTextColor,\n            '&:hover': {\n              backgroundColor: chipTextColor,\n            },\n            '&:not(:last-child)': {\n              marginBottom: '0.75rem',\n            },\n            '&.Mui-selected': {\n              backgroundColor: listItemActiveBg,\n              '&:hover': {\n                backgroundColor: listItemActiveBg,\n              },\n            },\n            '&.Mui-disabled': {\n              opacity: 0.8,\n            },\n          },\n        },\n      },\n    },\n  };\n};\n\nexport default (customVariables: ThemeVars) =>\n  applicationTheme({\n    ...vars,\n    ...customVariables,\n  });\n","export class Position {\n  x: number;\n  y: number;\n\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n}\n","import * as React from 'react';\nimport { MetaNode } from './models/MetaNode';\nimport { MetaLink } from './models/MetaLink';\nimport { ComponentsMap } from './models/ComponentsMap';\nimport createEngine, { DiagramModel } from '@projectstorm/react-diagrams';\nimport { MetaNodeFactory } from './react-diagrams/MetaNodeFactory';\nimport { MetaLinkFactory } from './react-diagrams/MetaLinkFactory';\nimport { CanvasWidget } from '@projectstorm/react-canvas-core';\nimport { MetaNodeModel } from './react-diagrams/MetaNodeModel';\nimport { getLinkModel } from './helpers/linksHelper';\nimport { makeStyles } from '@mui/styles';\nimport Sidebar from './components/Sidebar';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport theme from './theme';\nimport { Box } from '@mui/material';\n\nconst useStyles = makeStyles(_ => ({\n  container: {\n    height: '100%',\n    width: '100%',\n  },\n  canvasContainer: {\n    height: '100%',\n    width: '100%',\n    background: '#fffff',\n  },\n}));\n\ninterface MetaDiagramProps {\n  metaNodes: MetaNode[];\n  metaLinks: MetaLink[];\n  componentsMap: ComponentsMap;\n  wrapperClassName?: string;\n  canvasClassName?: string;\n  metaTheme: {\n    customThemeVariables: {};\n    canvasClassName: string;\n  };\n}\n\nconst MetaDiagram = ({\n  metaNodes,\n  metaLinks,\n  componentsMap,\n  wrapperClassName,\n  metaTheme,\n}: MetaDiagramProps) => {\n  const classes = useStyles();\n\n  // set up the diagram engine\n  const engine = createEngine();\n\n  engine\n    .getNodeFactories()\n    // @ts-ignore\n    .registerFactory(new MetaNodeFactory(componentsMap.nodes));\n\n  engine\n    .getLinkFactories()\n    // @ts-ignore\n    .registerFactory(new MetaLinkFactory(componentsMap.links));\n\n  // set up the diagram model\n\n  const model = new DiagramModel();\n  const nodes = metaNodes.map(\n    mn => new MetaNodeModel(Object.fromEntries(mn.options.options))\n  );\n  const links = metaLinks\n    .map(ml => getLinkModel(ml, nodes))\n    .filter(mlm => mlm !== undefined);\n  // @ts-ignore\n  model.addAll(...nodes, ...links);\n\n  // load model into engine\n  engine.setModel(model);\n\n  const containerClassName = wrapperClassName\n    ? wrapperClassName\n    : classes.container;\n\n  return (\n    <ThemeProvider theme={createTheme(theme(metaTheme?.customThemeVariables))}>\n      <CssBaseline />\n      <Box className={containerClassName}>\n        <Sidebar />\n        <CanvasWidget\n          className={`canvas-widget ${metaTheme?.canvasClassName}`}\n          engine={engine}\n        />\n      </Box>\n    </ThemeProvider>\n  );\n};\n\nexport default MetaDiagram;\nexport { MetaNode, MetaLink, MetaNodeModel, ComponentsMap };\nexport { MetaLinkModel } from './react-diagrams/MetaLinkModel';\nexport { Position } from './models/Position';\n"],"names":["MetaOptions","constructor","id","name","shape","options","set","getId","get","getShape","MetaNode","position","children","MetaLink","sourceId","sourcePortId","targetId","targetPortId","getSourceId","getSourcePortId","getTargetId","getTargetPortId","ComponentsMap","nodesMap","linksMap","nodes","links","ReactDiagramMetaTypes","MetaNodeModel","NodeModel","type","META_NODE","addPort","DefaultPortModel","in","UnknownTypeWidget","React","MetaNodeFactory","AbstractReactFactory","componentsMap","generateModel","generateReactWidget","event","has","model","ReactComponentType","engine","MetaLinkModel","DefaultLinkModel","META_LINK","MetaLinkFactory","DefaultLinkFactory","generateLinkSegment","selected","path","getOptions","getNode","find","n","getLinkModel","metaLink","link","Object","fromEntries","source","target","setSourcePort","getPort","setTargetPort","undefined","nodeGreen","nodeGreenBackgroundColor","nodeGreenTextColor","nodeGreenBorderColor","nodeGreenBoxShadow","vars","fontFamily","primaryBg","textWhite","chipTextColor","chipBgColor","chipPrimaryTextColor","chipPrimaryBgColor","breadcrumbLinkColor","breadcrumbTextColor","buttonPrimaryBgColor","buttonPrimaryBgHoverColor","buttonPrimaryDisabledBgColor","listItemActiveBg","listSelectedTextColor","listBoxShadow","listBorderColor","dividerColor","dropdownBg","dropdownTextColor","overlayColor","progressBg","progressBar","progressShadow","switchShadow","sidebarBg","sidebarShadow","canvasBg","showPropertiesButtonBg","nodeBorderColor","nodePointerBg","nodeButtonTextColor","nodeButtonLineColor","nodeTextColor","useStyles","makeStyles","node","margin","borderColor","width","border","borderTop","display","Sidebar","classes","setSelected","useState","svgImg","img","Buffer","toString","SidebarItem","props","image","selectedImage","selection","ListItemButton","onClick","ListItemIcon","src","alt","Box","className","List","disablePadding","component","CursorActive","Cursor","MoveActive","Move","Divider","Node","IconActive","Icon","FullscreenActive","Fullscreen","applicationTheme","params","components","MuiCssBaseline","styleOverrides","MI","MuiList","root","padding","background","borderRadius","alignItems","justifyContent","marginBottom","opacity","boxShadow","color","marginLeft","fontWeight","fontSize","lineHeight","letterSpacing","MuiListItemIcon","minWidth","MuiListItemButton","height","backgroundColor","customVariables","Position","x","y","_","container","canvasContainer","MetaDiagram","metaNodes","metaLinks","wrapperClassName","metaTheme","createEngine","getNodeFactories","registerFactory","getLinkFactories","DiagramModel","map","mn","ml","filter","mlm","addAll","setModel","containerClassName","ThemeProvider","theme","createTheme","customThemeVariables","CssBaseline","CanvasWidget","canvasClassName"],"mappings":"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"}